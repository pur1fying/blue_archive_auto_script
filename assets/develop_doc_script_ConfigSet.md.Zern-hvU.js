import{_ as a,c as i,o as t,ah as s}from"./chunks/framework.DaDXF32t.js";const f=JSON.parse('{"title":"Class ConfigSet","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/ConfigSet.md","filePath":"develop_doc/script/ConfigSet.md","lastUpdated":1758524414000}'),o={name:"develop_doc/script/ConfigSet.md"};function n(l,e,r,d,c,h){return t(),i("div",null,e[0]||(e[0]=[s(`<h1 id="class-configset" tabindex="-1">Class <code>ConfigSet</code> <a class="header-anchor" href="#class-configset" aria-label="Permalink to “Class ConfigSet”">​</a></h1><p>对应文件路径 :<code>&quot;core/config/ConfigSet.py&quot;</code></p><p><strong>related files</strong>:</p><ul><li><code>&quot;develop_tools/generate_dataclass_code.py&quot;</code></li><li><code>&quot;core/config/default_config.py&quot;</code></li><li><code>&quot;core/config/generated_user_config.py&quot;</code></li><li><code>&quot;core/config/generated_static_config.py&quot;</code></li></ul><h2 id="总览" tabindex="-1">总览 <a class="header-anchor" href="#总览" aria-label="Permalink to “总览”">​</a></h2><p>用于管理配置文件, 包括静态配置( static_config )和用户配置 ( self.config )</p><ol><li>加载, 初始化所有配置 <ul><li><a href="#init"><code>__init__</code></a></li><li><a href="#init-config"><code>_init_config</code></a></li></ul></li><li>读取 <ul><li><a href="#get"><code>get</code></a></li></ul></li><li>修改 <ul><li><a href="#set"><code>set</code></a></li><li><a href="#update"><code>update</code></a></li></ul></li><li>保存 <ul><li><a href="#save"><code>save</code></a></li></ul></li></ol><h2 id="members" tabindex="-1">Members <a class="header-anchor" href="#members" aria-label="Permalink to “Members”">​</a></h2><h3 id="static-config" tabindex="-1">static_config <a class="header-anchor" href="#static-config" aria-label="Permalink to “static_config”">​</a></h3><ul><li><strong>type</strong>: <code>StaticConfig</code> dataclass ( 见<code>generated_static_config.py</code> )</li><li><strong>note</strong>: 由<code>core.default_config.py.STATIC_DEFAULT_CONFIG</code> 生成 <ol><li><code>generated_static_config.StaticConfig</code></li><li><code>static.json</code></li></ol><ul><li>两者再共同构成<code>static_config</code></li></ul></li></ul><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to “config”">​</a></h3><ul><li><strong>type</strong>: <code>Config</code> dataclass ( 见<code>generated_user_config.py</code> )</li><li><strong>note</strong>: 由<code>core.default_config.py.USER_DEFAULT_CONFIG</code> 生成 <ol><li><code>generated_user_config.Config</code></li><li><code>config.json</code></li></ol><ul><li>两者再共同构成<code>config</code></li></ul></li></ul><h3 id="config-dir" tabindex="-1">config_dir <a class="header-anchor" href="#config-dir" aria-label="Permalink to “config_dir”">​</a></h3><ul><li><strong>type</strong>: <code>str</code></li><li><strong>description</strong>: 配置文件所在<strong>文件夹</strong>的绝对路径</li></ul><h3 id="server-mode" tabindex="-1">server_mode <a class="header-anchor" href="#server-mode" aria-label="Permalink to “server_mode”">​</a></h3><ul><li><strong>type</strong>: <code>str</code></li><li><strong>description</strong>: 值与 <a href="/develop_doc/script/Baas_thread.html#server"><code>Baas_thread.server</code></a> 相同</li></ul><h3 id="inject-comp-list" tabindex="-1">inject_comp_list <a class="header-anchor" href="#inject-comp-list" aria-label="Permalink to “inject_comp_list”">​</a></h3><h3 id="inject-config-list" tabindex="-1">inject_config_list <a class="header-anchor" href="#inject-config-list" aria-label="Permalink to “inject_config_list”">​</a></h3><h3 id="window" tabindex="-1">window <a class="header-anchor" href="#window" aria-label="Permalink to “window”">​</a></h3><h3 id="main-thread" tabindex="-1">main_thread <a class="header-anchor" href="#main-thread" aria-label="Permalink to “main_thread”">​</a></h3><h3 id="signals" tabindex="-1">signals <a class="header-anchor" href="#signals" aria-label="Permalink to “signals”">​</a></h3><h2 id="methods" tabindex="-1">Methods: <a class="header-anchor" href="#methods" aria-label="Permalink to “Methods:”">​</a></h2><h3 id="init" tabindex="-1"><code>__init__</code> <a class="header-anchor" href="#init" aria-label="Permalink to “__init__”">​</a></h3><ul><li><strong>Args</strong>: <ul><li><code>config_dir</code>: 配置文件目录的<strong>名称</strong>或<strong>绝对路径</strong></li></ul></li></ul><h3 id="init-static-config" tabindex="-1"><code>_init_static_config</code> <a class="header-anchor" href="#init-static-config" aria-label="Permalink to “_init_static_config”">​</a></h3><ul><li><strong>Description</strong>: 加载静态配置文件, 并将其存储在 <a href="#static-config"><code>static_config</code></a> 中</li></ul><h3 id="init-config" tabindex="-1"><code>_init_config</code> <a class="header-anchor" href="#init-config" aria-label="Permalink to “_init_config”">​</a></h3><ul><li><strong>Description</strong>: 加载用户配置文件, 并将其存储在 <a href="#config"><code>config</code></a> 中, 同时会设置 <a href="#server-mode"><code>server_mode</code></a></li></ul><h3 id="get" tabindex="-1"><code>get</code> <a class="header-anchor" href="#get" aria-label="Permalink to “get”">​</a></h3><ul><li><strong>Description</strong>: 获取一条配置值</li><li><strong>Args</strong>: <ul><li><code>key</code>: 配置名</li><li><code>default</code>: 默认值</li></ul></li></ul><h3 id="set" tabindex="-1"><code>set</code> <a class="header-anchor" href="#set" aria-label="Permalink to “set”">​</a></h3><ul><li><strong>Description</strong>: 更新一条配置值并保存</li><li><strong>Args</strong>: <ul><li><code>key</code>: 配置名</li><li><code>value</code>: 新值</li></ul></li><li><strong>note</strong>: 如果绑定了某个UI组件, 组件中的值会被同步更新</li></ul><h3 id="update" tabindex="-1"><code>update</code> <a class="header-anchor" href="#update" aria-label="Permalink to “update”">​</a></h3><ul><li><strong>Description</strong>: 相较<a href="#set"><code>set</code></a>, 仅更新配置值</li></ul><h3 id="save" tabindex="-1"><code>save</code> <a class="header-anchor" href="#save" aria-label="Permalink to “save”">​</a></h3><ul><li><strong>Description</strong>: 保存用户配置到<code>config.json</code>文件</li></ul><h3 id="dynamic-update" tabindex="-1"><code>dynamic_update</code> <a class="header-anchor" href="#dynamic-update" aria-label="Permalink to “dynamic_update”">​</a></h3><h3 id="getitem" tabindex="-1"><code>__getitem__</code> <a class="header-anchor" href="#getitem" aria-label="Permalink to “__getitem__”">​</a></h3><h3 id="add-signal" tabindex="-1"><code>add_signal</code> <a class="header-anchor" href="#add-signal" aria-label="Permalink to “add_signal”">​</a></h3><h3 id="get-signal" tabindex="-1"><code>get_signal</code> <a class="header-anchor" href="#get-signal" aria-label="Permalink to “get_signal”">​</a></h3><h3 id="set-window" tabindex="-1"><code>set_window</code> <a class="header-anchor" href="#set-window" aria-label="Permalink to “set_window”">​</a></h3><h3 id="get-window" tabindex="-1"><code>get_window</code> <a class="header-anchor" href="#get-window" aria-label="Permalink to “get_window”">​</a></h3><h3 id="set-main-thread" tabindex="-1"><code>set_main_thread</code> <a class="header-anchor" href="#set-main-thread" aria-label="Permalink to “set_main_thread”">​</a></h3><h3 id="get-main-thread" tabindex="-1"><code>get_main_thread</code> <a class="header-anchor" href="#get-main-thread" aria-label="Permalink to “get_main_thread”">​</a></h3><h3 id="inject" tabindex="-1"><code>inject</code> <a class="header-anchor" href="#inject" aria-label="Permalink to “inject”">​</a></h3><h3 id="update-create-quantity-entry-self" tabindex="-1"><code>update_create_quantity_entry(self)</code> <a class="header-anchor" href="#update-create-quantity-entry-self" aria-label="Permalink to “update_create_quantity_entry(self)”">​</a></h3><h2 id="使用示例-example-usage" tabindex="-1">使用示例 (Example Usage) <a class="header-anchor" href="#使用示例-example-usage" aria-label="Permalink to “使用示例 (Example Usage)”">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConfigSet(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default_config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config_set.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># get方法获取值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config_set.config.server </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 直接访问dataclass的成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config_set.set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;日服&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,48)]))}const _=a(o,[["render",n]]);export{f as __pageData,_ as default};
