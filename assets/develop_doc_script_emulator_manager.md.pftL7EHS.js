import{_ as a,c as i,o as l,ah as t}from"./chunks/framework.DaDXF32t.js";const p=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/emulator_manager.md","filePath":"develop_doc/script/emulator_manager.md","lastUpdated":1754125252000}'),o={name:"develop_doc/script/emulator_manager.md"};function s(c,e,d,n,r,u){return l(),i("div",null,e[0]||(e[0]=[t(`<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to “简介”">​</a></h1><p>模拟器进程级api，支持主流安卓模拟器。</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to “使用方法”">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> core.device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emulator_manager</span></span></code></pre></div><h2 id="包含功能-函数用法" tabindex="-1">包含功能&amp;函数用法 <a class="header-anchor" href="#包含功能-函数用法" aria-label="Permalink to “包含功能&amp;函数用法”">​</a></h2><h3 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to “接口”">​</a></h3><ul><li><code>get_adb_address(simulator_type,multi_instance)</code>获取对应的adb地址</li><li><code>get_simulator_commandline_uuid(uuid)</code>获取对应的命令行参数</li><li><code>convert_display_name(simulator_type,multi_instance)</code>输入内部参数，返回用户可读的模拟器名和多开信息</li><li><code>get_display_name_uuid(uuid)</code></li><li><code>auto_scan()</code>自动扫描正在运行的模拟器</li><li><code>autosearch()</code>自动扫描正在运行的模拟器对应的adb地址</li><li><code>mumu12_api_backend(simulator_type,multi_instance,operation)</code>mumumanager包装</li><li><code>simulator_cmd()</code>获取启动模拟器的命令行</li><li><code>process_native_api(input_type,process_input)</code></li><li><code>start_simulator_classic(simulator_type, multi_instance)</code>给定参数启动模拟器，该函数会直接返回对应的adb端口号。</li><li><code>stop_simulator_classic(simulator_type, multi_instance)</code>给定参数关闭模拟器</li><li><code>config_write(simulator_type, multi_instance, latest_adb_address = None,latest_command_line = None)</code>（给定模拟器类型并写入配置文件）</li><li><code>return_bluestacks_type(pid)</code>读取pid对应的蓝叠模拟器类型</li></ul><h3 id="mumu12-api-backend使用方法" tabindex="-1">mumu12_api_backend使用方法 <a class="header-anchor" href="#mumu12-api-backend使用方法" aria-label="Permalink to “mumu12_api_backend使用方法”">​</a></h3><p>simulator_type同下，只接受mumu和mumu_global</p><p>operation支持的操作类型：</p><ul><li><code>&quot;start&quot;</code>: 启动指定多开实例的模拟器，并返回其adb端口</li><li><code>&quot;stop&quot;</code>: 关闭指定多开实例的模拟器</li><li><code>&quot;get_path&quot;</code>: 获取MuMuManager.exe所在的目录</li><li><code>&quot;get_device_path&quot;</code>: 获取MuMuNxDevice.exe所在的目录</li><li><code>&quot;get_manager_path&quot;</code>: 获取MuMuManager.exe的完整路径</li><li><code>&quot;get_nemu_client_path&quot;</code>: 获取external_renderer_ipc.dll的完整路径</li><li><code>&quot;disable_app_keptlive&quot;</code>: 关闭指定多开实例的后台保活功能</li><li><code>&quot;enable_app_keptlive&quot;</code>: 开启指定多开实例的后台保活功能</li><li><code>&quot;get_launch_status&quot;</code>: 获取指定多开实例的启动状态（返回状态字符串）</li></ul><h3 id="通用参数" tabindex="-1">通用参数 <a class="header-anchor" href="#通用参数" aria-label="Permalink to “通用参数”">​</a></h3><p>simulator_type:（模拟器类型）</p><ul><li>bluestacks_nxt：蓝叠模拟器5国际版</li><li>bluestacks_nxt_cn：蓝叠模拟器5中国版</li><li>mumu：MuMu12模拟器</li><li>mumu_global: MuMu12模拟器国际版</li><li>yeshen：夜神模拟器</li><li>xiaoyao_nat：逍遥模拟器（非桥接模式）</li><li>leidian：雷电模拟器</li></ul><p>multi_instance：</p><ul><li>mumu, yeshen, xiaoyao_nat, leidian中该参数为多开<strong>数字</strong>，以<strong>0</strong>为初始值</li><li>bluestacks_nxt，bluestacks_nxt_cn中该参数为 蓝叠多开器/BlueStacks Multi-Instance Manager内对应模拟器的显示名称，建议使用编辑-复制粘贴以避免打错。<strong>该参数大小写敏感</strong>。</li><li>wsa中该参数默认为127.0.0.1/localhost，无需填写，如果为其他设备的wsa，填写对应设备的ipv4地址或主机名。</li><li>mumu_classic不支持多开模拟器使用不同adb端口。</li></ul><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>非常不建议使用 process_native_api，直接使用较为危险。</p></div><h2 id="支持的操作" tabindex="-1">支持的操作 <a class="header-anchor" href="#支持的操作" aria-label="Permalink to “支持的操作”">​</a></h2><ul><li>结束模拟器</li><li>启动模拟器</li><li>获取模拟器adb端口</li><li>获取模拟器命令行参数</li></ul>`,19)]))}const m=a(o,[["render",s]]);export{p as __pageData,m as default};
