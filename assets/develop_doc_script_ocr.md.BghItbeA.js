import{_ as d,c as a,o as s,ah as e}from"./chunks/framework.DaDXF32t.js";const i="/assets/pass_method1_example.fsf2Qp2J.png",g=JSON.parse('{"title":"文字识别(OCR)","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/ocr.md","filePath":"develop_doc/script/ocr.md","lastUpdated":1759412563000}'),n={name:"develop_doc/script/ocr.md"};function r(h,t,l,o,c,p){return s(),a("div",null,t[0]||(t[0]=[e(`<h1 id="文字识别-ocr" tabindex="-1">文字识别(OCR) <a class="header-anchor" href="#文字识别-ocr" aria-label="Permalink to “文字识别(OCR)”">​</a></h1><h2 id="简介-introduction" tabindex="-1">简介(Introduction) <a class="header-anchor" href="#简介-introduction" aria-label="Permalink to “简介(Introduction)”">​</a></h2><p>OCR 已使用<a href="https://github.com/pur1fying/BAAS_Cpp" target="_blank" rel="noreferrer">C++重构</a>, 作为BAAS的子进程, 通过http请求为BAAS提供文字识别服务</p><ul><li>相关文件路径: <ol><li><strong>BAAS</strong>实际调用的ocr:<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/core/ocr/ocr.py</span></span></code></pre></div></li><li>ocr安装脚本:<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/core/ocr/baas_ocr_client/server_installer.py</span></span></code></pre></div></li><li>ocr客户端:<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/core/ocr/baas_ocr_client/Client.py</span></span></code></pre></div></li><li>ocr可执行程序安装目录:<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/core/ocr/baas_ocr_server/bin</span></span></code></pre></div></li></ol></li></ul><h2 id="预编译版本-prebuild-version" tabindex="-1">预编译版本(Prebuild Version) <a class="header-anchor" href="#预编译版本-prebuild-version" aria-label="Permalink to “预编译版本(Prebuild Version)”">​</a></h2><ol><li><strong>BAAS_ocr_server</strong>使用github-action自动构建在不同操作系统的可执行程序, 并推送至<a href="https://github.com/pur1fying/BAAS_Cpp_prebuild" target="_blank" rel="noreferrer">github仓库</a></li><li><strong>BAAS</strong>使用core/ocr/baas_ocr_client/server_installer.py自动 <strong>安装/更新</strong> 最新的可执行程序</li><li>可使用的预编译版本 <ul><li><table tabindex="0"><thead><tr><th>操作系统</th><th>架构</th><th>操作系统版本</th><th>可执行程序分支</th></tr></thead><tbody><tr><td>Windows</td><td>x86_64</td><td>win10/win11</td><td><a href="https://github.com/pur1fying/BAAS_Cpp_prebuild/tree/windows-x64" target="_blank" rel="noreferrer">windows-x64</a></td></tr><tr><td>Linux</td><td>x86_64</td><td>ubuntu-22.04</td><td><a href="https://github.com/pur1fying/BAAS_Cpp_prebuild/tree/linux-x64" target="_blank" rel="noreferrer">linux-x64</a></td></tr><tr><td>MacOS</td><td>arm64</td><td>最新版本</td><td><a href="https://github.com/pur1fying/BAAS_Cpp_prebuild/tree/macos-arm64" target="_blank" rel="noreferrer">macos-arm64</a></td></tr></tbody></table></li></ul></li><li>如果你的操作系统无法使用预编译版本, 可能需要自行编译 / 联系开发者适配</li><li><strong>BAAS_ocr_server</strong> 在编译时默认不支持cuda, 原因是使用cuda会使依赖的dll增加约500MB, 但是可以自行编译支持cuda的版本, 仅需要在CMake选项中设置BAAS_OCR_SERVER_USE_CUDA为ON</li></ol><h2 id="配置列表-config" tabindex="-1"><strong>配置列表(Config)</strong> <a class="header-anchor" href="#配置列表-config" aria-label="Permalink to “配置列表(Config)”">​</a></h2><p>配置文件路径:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">可执行程序安装目录/config/global_setting.json</span></span></code></pre></div><table tabindex="0"><thead><tr><th>编号</th><th>配置名</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><strong>/ocr/gpu_id</strong></td><td>如果使用cuda加速, 推理的gpu编号</td></tr><tr><td>2</td><td><strong>/ocr/num_thread</strong></td><td>onnxruntime推理的线程数</td></tr><tr><td>3</td><td><strong>/ocr/enable_cpu_memory_arena</strong></td><td>是否使用内存池</td></tr><tr><td>4</td><td><strong>/ocr/server/host</strong></td><td>服务的ip地址</td></tr><tr><td>5</td><td><strong>/ocr/server/port</strong></td><td>服务的端口号</td></tr><tr><td>6</td><td><strong>/log/flush_interval</strong></td><td>日志刷新间隔时间(ms)</td></tr></tbody></table><p><strong>note</strong>:</p><ol><li>1, 2, 3 项是初始化模型时可以指定的参数(当没有以任何形式指定时, 使用配置文件中的默认值)</li><li>考虑到onnxruntime使用gpu推理时库的大小, BAAS_ocr_server的发行版编译时<strong>没有支持cuda</strong>, 但是可以自行编译支持cuda的版本</li></ol><h2 id="api列表" tabindex="-1"><strong>API列表</strong> <a class="header-anchor" href="#api列表" aria-label="Permalink to “API列表”">​</a></h2><h3 id="初始化模型" tabindex="-1">初始化模型 <a class="header-anchor" href="#初始化模型" aria-label="Permalink to “初始化模型”">​</a></h3><h4 id="请求信息" tabindex="-1"><strong>请求信息</strong> <a class="header-anchor" href="#请求信息" aria-label="Permalink to “请求信息”">​</a></h4><table tabindex="0"><thead><tr><th>方法</th><th>URL</th></tr></thead><tbody><tr><td><code>POST</code></td><td><code>/init_model</code></td></tr></tbody></table><h4 id="请求体" tabindex="-1"><strong>请求体</strong> <a class="header-anchor" href="#请求体" aria-label="Permalink to “请求体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td><code>language</code></td><td><code>List[str]</code></td><td>是</td><td>语言</td></tr><tr><td><code>gpu_id</code></td><td><code>int</code></td><td>否</td><td>gpu id</td></tr><tr><td><code>num_thread</code></td><td><code>int</code></td><td>否</td><td>推理线程数</td></tr><tr><td><code>EnableCpuMemoryArena</code></td><td><code>bool</code></td><td>否</td><td>是否使用内存池</td></tr></tbody></table><p><strong>note</strong>:</p><ol><li>当使用内存池时, BAAS_ocr_server会占用更多内存, 推理速度略有增加</li><li>num_thread越大, 推理速度越块, 经测试4时达最快速度</li><li>language字段<a href="#可选的语言">可选的语言</a></li></ol><h4 id="响应体" tabindex="-1"><strong>响应体</strong> <a class="header-anchor" href="#响应体" aria-label="Permalink to “响应体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>ret</code></td><td><code>List[int]</code></td><td>每个模型初始化状态</td></tr><tr><td><code>time</code></td><td><code>int</code></td><td>初始化时间(ms)</td></tr></tbody></table><p><code>ret</code>中每个数字含义如下表</p><table tabindex="0"><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>0</code></td><td>不存在的语言</td></tr><tr><td><code>1</code></td><td><code>success</code></td></tr><tr><td><code>2</code></td><td>已经初始化过的语言</td></tr></tbody></table><h3 id="释放模型" tabindex="-1">释放模型 <a class="header-anchor" href="#释放模型" aria-label="Permalink to “释放模型”">​</a></h3><h4 id="请求信息-1" tabindex="-1"><strong>请求信息</strong> <a class="header-anchor" href="#请求信息-1" aria-label="Permalink to “请求信息”">​</a></h4><table tabindex="0"><thead><tr><th>方法</th><th>URL</th></tr></thead><tbody><tr><td><code>POST</code></td><td><code>/release_model</code></td></tr></tbody></table><h4 id="请求体-1" tabindex="-1"><strong>请求体</strong> <a class="header-anchor" href="#请求体-1" aria-label="Permalink to “请求体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td><code>language</code></td><td><code>List[str]</code></td><td>是</td><td>语言</td></tr></tbody></table><p><strong>note</strong>: onnxruntime C++ 库存在内存泄露问题, 所以请勿频繁 加载 / 释放 模型</p><h4 id="响应体-1" tabindex="-1"><strong>响应体</strong> <a class="header-anchor" href="#响应体-1" aria-label="Permalink to “响应体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>ret</code></td><td><code>List[bool]</code></td><td>每个模型释放</td></tr><tr><td><code>time</code></td><td><code>int</code></td><td>释放总时间(ms)</td></tr></tbody></table><p><code>ret</code>中每个bool含义如下表</p><table tabindex="0"><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>false</code></td><td>不存在的语言</td></tr><tr><td><code>true</code></td><td><code>success</code></td></tr></tbody></table><h3 id="释放所有模型" tabindex="-1">释放所有模型 <a class="header-anchor" href="#释放所有模型" aria-label="Permalink to “释放所有模型”">​</a></h3><h4 id="请求信息-2" tabindex="-1"><strong>请求信息</strong> <a class="header-anchor" href="#请求信息-2" aria-label="Permalink to “请求信息”">​</a></h4><table tabindex="0"><thead><tr><th>方法</th><th>URL</th></tr></thead><tbody><tr><td><code>Get</code></td><td><code>/release_all</code></td></tr></tbody></table><h4 id="响应体-2" tabindex="-1"><strong>响应体</strong> <a class="header-anchor" href="#响应体-2" aria-label="Permalink to “响应体”">​</a></h4><p>仅有一个<code>int</code>, 表示释放总时间(ms)</p><h3 id="获取图像的文字框" tabindex="-1">获取图像的文字框 <a class="header-anchor" href="#获取图像的文字框" aria-label="Permalink to “获取图像的文字框”">​</a></h3><p>暂未实现</p><h3 id="ocr-for-single-line" tabindex="-1">ocr_for_single_line <a class="header-anchor" href="#ocr-for-single-line" aria-label="Permalink to “ocr_for_single_line”">​</a></h3><h4 id="请求信息-3" tabindex="-1"><strong>请求信息</strong> <a class="header-anchor" href="#请求信息-3" aria-label="Permalink to “请求信息”">​</a></h4><table tabindex="0"><thead><tr><th>方法</th><th>URL</th></tr></thead><tbody><tr><td><code>POST</code></td><td><code>/ocr_for_single_line</code></td></tr></tbody></table><h4 id="请求体-2" tabindex="-1"><strong>请求体</strong> <a class="header-anchor" href="#请求体-2" aria-label="Permalink to “请求体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td><code>/language</code></td><td><code>string</code></td><td>是</td><td>语言</td></tr><tr><td><code>/candidates</code></td><td><code>string</code></td><td>否</td><td>可能出现的字</td></tr><tr><td><code>/image/pass_method</code></td><td><code>unsigned int</code></td><td>是</td><td>图像传递方式</td></tr><tr><td><code>/image/local_path</code></td><td><code>string</code></td><td>否</td><td>图像本地路径</td></tr><tr><td><code>/image/shared_memory_name</code></td><td><code>string</code></td><td>否</td><td>图像数据所在的共享内存名</td></tr><tr><td><code>/image/resolution</code></td><td><code>[int, int]</code></td><td>否</td><td>图像尺寸</td></tr></tbody></table><p><strong>note</strong>:</p><ol><li><a href="#图像传递方式-pass-method">pass_method</a>填写说明</li></ol><h4 id="响应体-3" tabindex="-1"><strong>响应体</strong> <a class="header-anchor" href="#响应体-3" aria-label="Permalink to “响应体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>ocr_time</code></td><td><code>int</code></td><td>ocr耗费时间</td></tr><tr><td><code>time</code></td><td><code>int</code></td><td>处理请求总时间(ocr_time与解码图像的时间)</td></tr><tr><td><code>text</code></td><td><code>string</code></td><td>ocr得到的文字</td></tr><tr><td><code>char_scores</code></td><td><code>List[float]</code></td><td>每个文字的得分</td></tr></tbody></table><h3 id="ocr" tabindex="-1">ocr <a class="header-anchor" href="#ocr" aria-label="Permalink to “ocr”">​</a></h3><h4 id="请求信息-4" tabindex="-1"><strong>请求信息</strong> <a class="header-anchor" href="#请求信息-4" aria-label="Permalink to “请求信息”">​</a></h4><table tabindex="0"><thead><tr><th>方法</th><th>URL</th></tr></thead><tbody><tr><td><code>POST</code></td><td><code>/ocr</code></td></tr></tbody></table><h4 id="请求体-3" tabindex="-1"><strong>请求体</strong> <a class="header-anchor" href="#请求体-3" aria-label="Permalink to “请求体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td><code>/language</code></td><td><code>string</code></td><td>是</td><td>语言</td></tr><tr><td><code>/candidates</code></td><td><code>string</code></td><td>否</td><td>可能出现的字</td></tr><tr><td><code>/image/pass_method</code></td><td><code>unsigned int</code></td><td>是</td><td>图像传递方式</td></tr><tr><td><code>/image/local_path</code></td><td><code>string</code></td><td>否</td><td>图像本地路径</td></tr><tr><td><code>/image/shared_memory_name</code></td><td><code>string</code></td><td>否</td><td>图像数据所在的共享内存名</td></tr><tr><td><code>/image/resolution</code></td><td><code>[int, int]</code></td><td>否</td><td>图像尺寸</td></tr><tr><td><code>ret_options</code></td><td><code>unsigned int</code></td><td>否</td><td>返回选项</td></tr></tbody></table><p><strong>note</strong>:</p><ol><li><p><strong>ret_options</strong></p><table tabindex="0"><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>ret_options &amp; 0b001</code></td><td>为真时返回<code>angle_net</code>信息</td></tr><tr><td><code>ret_options &amp; 0b010</code></td><td>为真时返回每个字符得分</td></tr><tr><td><code>ret_options &amp; 0b100</code></td><td>为真时返回所有字符框</td></tr></tbody></table></li><li><p><a href="#图像传递方式-pass-method">pass_method</a>填写说明</p></li></ol><h4 id="响应体-4" tabindex="-1"><strong>响应体</strong> <a class="header-anchor" href="#响应体-4" aria-label="Permalink to “响应体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>dbNet_time</code></td><td><code>double</code></td><td>获取图像文字框的时间</td></tr><tr><td><code>full_detection_time</code></td><td><code>double</code></td><td>ocr总耗费时间</td></tr><tr><td><code>str_res</code></td><td><code>string</code></td><td>ocr得到的所有文字, 每个文字框中文字由换行符分割组成的字符串</td></tr><tr><td><code>time</code></td><td><code>int</code></td><td>处理请求总时间(ocr_time与解码图像的时间)</td></tr><tr><td><code>text_list</code></td><td><code>List[dict]</code></td><td>ocr得到的文字列表</td></tr></tbody></table><p><strong>note</strong>:</p><ol><li>可以通过<code>ret_options</code>来选择返回的信息</li><li><code>text_list</code>中dict每个字段含义如下表</li></ol><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>/angle_net/index</code></td><td><code>int</code></td><td>是否旋转180°检测</td></tr><tr><td><code>/angle_net/score</code></td><td><code>float</code></td><td>旋转检测得分</td></tr><tr><td><code>/angle_net/time</code></td><td><code>double</code></td><td>旋转检测耗时</td></tr><tr><td><code>/char_scores</code></td><td><code>List[float]</code></td><td>每个文字的得分</td></tr><tr><td><code>/crnn_time</code></td><td><code>double</code></td><td>识别文字的耗时</td></tr><tr><td><code>/position</code></td><td><code>List[List[int]]</code></td><td>文字框左上, 右上, 右下, 左下四个点坐标</td></tr><tr><td><code>/text</code></td><td><code>string</code></td><td>文字内容</td></tr></tbody></table><p><strong>example</strong>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dbNet_time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.0052000023424625</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;full_detection_time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27.64159999974072</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;str_res&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I love Aris</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;text_list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;angle_net&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;char_scores&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9848999977111816</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9710265398025513</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9992157220840454</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9999686479568481</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.999990701675415</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9999799728393555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9991695880889893</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9998763799667358</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9999078512191772</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9999631643295288</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0.9999544620513916</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;crnn_time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    29</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    109</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    29</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    109</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I love Aris&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="创建共享内存" tabindex="-1">创建共享内存 <a class="header-anchor" href="#创建共享内存" aria-label="Permalink to “创建共享内存”">​</a></h3><h4 id="请求信息-5" tabindex="-1"><strong>请求信息</strong> <a class="header-anchor" href="#请求信息-5" aria-label="Permalink to “请求信息”">​</a></h4><table tabindex="0"><thead><tr><th>方法</th><th>URL</th></tr></thead><tbody><tr><td><code>POST</code></td><td><code>/create_shared_memory</code></td></tr></tbody></table><h4 id="请求体-4" tabindex="-1"><strong>请求体</strong> <a class="header-anchor" href="#请求体-4" aria-label="Permalink to “请求体”">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td><code>/shared_memory_name</code></td><td><code>string</code></td><td>是</td><td>共享内存名</td></tr><tr><td><code>/size</code></td><td><code>unsigned long long</code></td><td>是</td><td>共享内存大小</td></tr></tbody></table><h2 id="可选的语言" tabindex="-1">可选的语言 <a class="header-anchor" href="#可选的语言" aria-label="Permalink to “可选的语言”">​</a></h2><table tabindex="0"><thead><tr><th>language</th><th>语言</th></tr></thead><tbody><tr><td><code>zh-cn</code></td><td><code>ppocr_v4简体中文模型</code></td></tr><tr><td><code>zh-cn_v3</code></td><td><code>ppocr_v3简体中文模型</code></td></tr><tr><td><code>zh-tw</code></td><td><code>繁体中文</code></td></tr><tr><td><code>en-us</code></td><td><code>英文</code></td></tr><tr><td><code>ja-jp</code></td><td><code>日文</code></td></tr><tr><td><code>ko-kr</code></td><td><code>韩文</code></td></tr><tr><td><code>ru-ru</code></td><td><code>俄文</code></td></tr></tbody></table><h2 id="图像传递方式-pass-method" tabindex="-1">图像传递方式(pass_method) <a class="header-anchor" href="#图像传递方式-pass-method" aria-label="Permalink to “图像传递方式(pass_method)”">​</a></h2><h3 id="本地图像" tabindex="-1">本地图像 <a class="header-anchor" href="#本地图像" aria-label="Permalink to “本地图像”">​</a></h3><ol><li>共享内存传递</li><li>提供图像路径, ocr_server读取对应图像 (仅保证支持png格式)</li><li>传递图像png编码后的二进制数据</li></ol><h3 id="远程图像" tabindex="-1">远程图像 <a class="header-anchor" href="#远程图像" aria-label="Permalink to “远程图像”">​</a></h3><ol><li>传递图像png编码后的二进制数据</li></ol><h3 id="pass-method" tabindex="-1">pass_method <a class="header-anchor" href="#pass-method" aria-label="Permalink to “pass_method”">​</a></h3><table tabindex="0"><thead><tr><th>值</th><th>传递方式</th><th>必填参数</th></tr></thead><tbody><tr><td>0</td><td>共享内存</td><td>shared_memory_name , resolution</td></tr><tr><td>1</td><td>传递图像png编码后的二进制数据</td><td>image_data</td></tr><tr><td>2</td><td>本地路径</td><td>local_path</td></tr></tbody></table><p><strong>note</strong>:</p><ol><li>必填参数是指使用该方式传递图像ocr_for_single_line与ocr请求体中的参数</li><li><code>pass_method</code>为2时, post请求应该传递file参数, 没有json参数 <ul><li>示例 <img src="`+i+'" alt="pass_method1_example"></li></ul></li></ol>',80)]))}const b=d(n,[["render",r]]);export{g as __pageData,b as default};
