import{_ as a,c as s,o as e,ah as l}from"./chunks/framework.DaDXF32t.js";const k=JSON.parse('{"title":"BAAS_Cpp","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/BAAS_Cpp.md","filePath":"develop_doc/script/BAAS_Cpp.md","lastUpdated":1759412563000}'),t={name:"develop_doc/script/BAAS_Cpp.md"};function d(h,i,n,o,p,r){return e(),s("div",null,i[0]||(i[0]=[l('<h1 id="baas-cpp" tabindex="-1">BAAS_Cpp <a class="header-anchor" href="#baas-cpp" aria-label="Permalink to “BAAS_Cpp”">​</a></h1><ul><li><a href="https://github.com/pur1fying/BAAS_Cpp" target="_blank" rel="noreferrer">仓库地址</a></li></ul><p><strong>note</strong>:</p><ol><li>BAAS_Cpp是一个安卓自动化脚本框架, 这是对blue_archive_auto_script的C++重构 , 目的是实现一个功能齐全的自动化脚本框架,简化开发流程</li><li>BAAS目前使用的一部分模块(如自动战斗, OCR) 都在此仓库实现</li><li>BAAS_Cpp根据核心代码, 衍生出以下不同的应用 <ul><li><code>BAAS_APP</code> : 游戏<code>蔚蓝档案</code>自动战斗实现</li><li><code>BAAS_auto_fight_workflow_checker</code>: 自动战斗工作流检查器, 用于检查自动战斗的工作流<code>json</code>文件是否正确</li><li><code>ISA</code> : 游戏<code>学园偶像大师</code>日常脚本</li><li><code>baas_ocr_server</code> : 跨平台的本地文字识别服务器</li><li>编译以上应用参见<a href="#编译">编译</a>部分</li></ul></li></ol><h2 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-label="Permalink to “依赖”">​</a></h2><p>BAAS_Cpp 目前使用的一些重要库的版本如下</p><table tabindex="0"><thead><tr><th>库</th><th>版本</th></tr></thead><tbody><tr><td><code>OpenCV</code></td><td><code>4.9.0</code></td></tr><tr><td><code>ONNX Runtime</code></td><td><code>1.22.0</code></td></tr><tr><td><code>CUDA</code></td><td><code>12.2</code></td></tr><tr><td><code>cuDNN</code></td><td><code>9.9.0</code></td></tr></tbody></table><h2 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to “编译”">​</a></h2><h3 id="baas-app" tabindex="-1">BAAS_APP <a class="header-anchor" href="#baas-app" aria-label="Permalink to “BAAS_APP”">​</a></h3><ul><li><strong>note</strong>:</li></ul><ol><li>目前仅支持Windows系统</li><li>CMake &gt;= <code>3.22</code></li><li>Visual Studio == <code>2022</code></li><li>可选择是否使用CUDA <ul><li><a href="#启用cuda编译baas-app">启用CUDA编译</a></li></ul></li></ol><h4 id="启用cuda编译baas-app" tabindex="-1">启用CUDA编译BAAS_APP <a class="header-anchor" href="#启用cuda编译baas-app" aria-label="Permalink to “启用CUDA编译BAAS_APP”">​</a></h4><ol><li>需要先下载ONNX Runtime 1.22.0 预编译包 <ul><li>下载链接</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-win-x64-gpu-1.22.0.zip</span></span></code></pre></div></li><li>解压并将<code>lib/onnxruntime_providers_cuda.dll</code>移动到<code>dll/Windows/</code>目录下</li><li>接着在<code>x64 Native Tools Command Prompt for VS 2022</code>中运行</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ninja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_APP_BAAS=TRUE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BAAS_APP_USE_CUDA=TRUE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BUILD_BAAS_OCR=FALSE</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre></div>',15)]))}const g=a(t,[["render",d]]);export{k as __pageData,g as default};
