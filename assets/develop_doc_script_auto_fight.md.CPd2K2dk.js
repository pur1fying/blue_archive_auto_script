import{_ as t,c as i,o as e,ah as a}from"./chunks/framework.DaDXF32t.js";const o="/assets/procedure_draft.DW7kGxwR.png",n="/assets/total_assault_general.Db-O1sud.png",d="/assets/boss_health.DqU66MEl.png",l="/assets/student_skill.DYz8NAsw.png",r="/assets/acc_auto_phase.wDZsOCDb.png",c="/assets/current_cost.BjcX7Bxu.png",h="/assets/fight_left_time.C0VOcm3d.png",p="/assets/room_left_time.KUq3rtEg.png",k="/assets/student_position.30e4DIIl.png",g="/assets/enemy_position.CUEuOFM1.png",u="/assets/screenshot_data_update_cycle.8xqj1ZsV.png",E="/assets/yolo_data_yaml_names.BZK9yf_C.png",_="/assets/skill_templates.DZwl2Viw.png",m="/assets/condition_judgement.kigj1tON.png",P=JSON.parse('{"title":"自动战斗(Auto Fight)","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/auto_fight.md","filePath":"develop_doc/script/auto_fight.md","lastUpdated":1757509302000}'),y={name:"develop_doc/script/auto_fight.md"};function b(f,s,F,C,q,x){return e(),i("div",null,s[0]||(s[0]=[a('<h1 id="自动战斗-auto-fight" tabindex="-1">自动战斗(Auto Fight) <a class="header-anchor" href="#自动战斗-auto-fight" aria-label="Permalink to “自动战斗(Auto Fight)”">​</a></h1><h2 id="简介-introduction" tabindex="-1">简介(Introduction) <a class="header-anchor" href="#简介-introduction" aria-label="Permalink to “简介(Introduction)”">​</a></h2><p>本文档记录了<strong>BAAS</strong>自动战斗的框架以及原理, 并通过一个例子教学如何按照<strong>BAAS</strong>的自动战斗框架的规范书写自动战斗的轴文件</p><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p><strong>如果你是C++小白,不用理解代码是如何书写的,重点关注轴文件的格式, 跟着本文的指导一步一步理解也可以写出正确的轴文件</strong> 详细的自动战斗写轴<a href="https://www.acfun.cn/v/ac47360708_9" target="_blank" rel="noreferrer">视频教程</a> 国服气垫船<strong>BAAS</strong>自动战斗凹分<a href="https://www.acfun.cn/v/ac47360708_8" target="_blank" rel="noreferrer">演示视频</a></p></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>轴文件为json格式, 请先学习json的书写规范, 否则你可能会因为json格式错误导致轴文件无法被解析</p></div><ul><li>首先明确一点, 这里的自动战斗并非指使用游戏内的auto让角色盲目的释放技能, 而是指<strong>BAAS</strong>通过截取战斗时的图像并提取其中的信息, 根据一个用户指定的<code>流程</code>在<code>恰当的条件</code>下<code>释放技能</code></li><li>这个流程简称为<code>轴</code>, <code>轴</code>是一个<code>json</code>格式的文件, 里面包含了自动战斗的所有信息</li><li>使用者可以根据需求与<strong>自动战斗规范</strong>书写<code>轴</code>文件, <strong>BAAS</strong>负责解析<code>轴</code>是否合法并运行合法的轴</li><li><strong>BAAS</strong>的自动战斗运作理念类似于编译原理中的<strong>有限状态自动机</strong></li></ul><h2 id="例子-example" tabindex="-1">例子(Example) <a class="header-anchor" href="#例子-example" aria-label="Permalink to “例子(Example)”">​</a></h2><p>以下图的简单流程作为自动战斗轴文件的书写例子, 当你理解了这个例子, 你就能完全理解<strong>BAAS</strong>自动战斗的工作原理, 以及轴文件该如何书写 <img src="'+o+'" alt="procedure_draft"></p><p>观察这个流程图, 我们可以发现:</p><ul><li><p>流程中存在以下条件<code>condition</code> (每一个箭头上的文字)</p><ol><li>血量 &gt; 500w</li><li>血量 &lt; 500w</li><li>血量 &gt; 0</li><li>血量 &lt; 0</li></ol></li><li><p>流程中存在以下动作<code>action</code></p><ol><li>释放技能1 <code>release_skill_1</code></li><li>释放技能2 <code>release_skill_2</code></li><li>重开 <code>restart</code></li></ol></li><li><p>我们可以将流程拆分为以下状态<code>state</code></p><ol><li>自动战斗开始 <code>start</code><ul><li>下一个状态 : 释放技能1</li></ul></li><li>释放技能1 <code>release_skill_1</code><ul><li>动作 : 释放技能1</li><li>状态转移 : <ol><li>条件 : 血量 &gt; 500w | 下一个状态 : 重开</li><li>条件 : 血量 &lt; 500w | 下一个状态 : 释放技能2</li></ol></li></ul></li><li>释放技能2 <code>release_skill_2</code><ul><li>动作 : 释放技能2</li><li>状态转移 : <ol><li>条件 : 血量 &gt; 0 | 下一个状态 : 重开</li><li>条件 : 血量 &lt; 0 | 下一个状态 : 结束</li></ol></li></ul></li><li>重开 <code>restart</code><ul><li>动作 : 重开</li><li>下一个状态 : 释放技能1</li></ul></li><li>结束 <code>end</code></li></ol></li></ul><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>你或许会疑惑<code>state</code>中的释放技能1 / 释放技能2 / 重开 是不是与上面的<code>action</code>重复了, 这实际上是完全不同的概念, 状态名<code>state</code>是可以和动作名<code>action</code>相同的, 请注意区分同名的状态和动作</p></div><ul><li><p>根据以上例子, 你可能发现了, <strong>BAAS</strong>自动战斗轴文件本质上需要你完成三个内容:</p><ul><li><code>状态(state)</code> : 自动战斗在到达状态时执行动作, 并按照转移条件转移到下一个状态 <ul><li><a href="#状态-state">状态书写规范</a></li></ul></li><li><code>条件(condition)</code> : 状态转移的条件 <ul><li><a href="#条件-condition">条件书写规范</a></li></ul></li><li><code>动作(action)</code> : 到达一个状态后立即执行的动作 <ul><li><a href="#动作-action">动作书写规范</a></li></ul></li></ul></li><li><p>接下来我们逐步讲解自动战斗轴该如何书写</p></li></ul><h2 id="截图数据监测" tabindex="-1">截图数据监测 <a class="header-anchor" href="#截图数据监测" aria-label="Permalink to “截图数据监测”">​</a></h2><ul><li>相关代码见 <code>apps/BAAS/src/module/auto_fight/screenshot_data</code> 文件夹</li></ul><h3 id="可监测的数据" tabindex="-1">可监测的数据 <a class="header-anchor" href="#可监测的数据" aria-label="Permalink to “可监测的数据”">​</a></h3><p>以下图为例介绍在自动战斗中图像中可被提取的数据</p><ul><li><img src="'+n+'" alt="total_assault_general.png"></li></ul><ol><li>BOSS的最大血量 / 总血量 <a href="/develop_doc/script/auto_fight_boss_health_update.html">Code</a><img src="'+d+'" alt="boss_health.png"></li><li>每个技能槽学生的技能名以及技能释费用 <a href="/develop_doc/script/auto_fight_skill_update.html">Code</a><img src="'+l+'" alt="student_skill.png"></li><li>(倍速 <a href="/develop_doc/script/auto_fight_acc_phase_update.html">Code</a>) / (自动 <a href="/develop_doc/script/auto_fight_auto_state_update.html">Code</a>) 状态 <img src="'+r+'" alt="acc_auto_phase.png"></li><li>当前可用于释放技能的费用 <a href="/develop_doc/script/auto_fight_cost_update.html">Code</a><img src="'+c+'" alt="current_cost.png"></li><li>战斗剩余时间 <img src="'+h+'" alt="fight_left_time.png"></li><li>房间剩余时间 <img src="'+p+'" alt="room_left_time.png"></li><li>学生位置坐标及 <img src="'+k+'" alt="student_position.png"></li><li>敌对角色的位置 <img src="'+g+'" alt="enemy_position.png"></li></ol><h3 id="数据记录类" tabindex="-1">数据记录类 <a class="header-anchor" href="#数据记录类" aria-label="Permalink to “数据记录类”">​</a></h3><p>screenshot_data_recorder 使用类来记录<a href="#可监测的数据">可监测的数据</a>中的数据, 以供<a href="#动作-action">动作(action)</a> 和 <a href="#条件-condition">条件(condition)</a>使用</p><h3 id="数据更新" tabindex="-1">数据更新 <a class="header-anchor" href="#数据更新" aria-label="Permalink to “数据更新”">​</a></h3><p>按照下图的架构实现自动战斗的数据更新 <img src="'+u+`" alt="screenshot_data_update_cycle.png"></p><ul><li><p>每个数据更新都对应一个类, 他们都继承自<a href="/develop_doc/script/auto_fight_BaseDataUpdater.html"><code>class BaseDataUpdater</code></a> 类<code>screenshot_data</code> 中 <code>d_updater_mask</code> 用于指示一轮数据更新中哪些<code>update()</code> 函数需要被调用, 每一位对应一个数据更新类, 对应关系如下</p><table tabindex="0"><thead><tr><th>Bit</th><th>Updater</th></tr></thead><tbody><tr><td><code>1</code></td><td><code>CostUpdater</code></td></tr><tr><td><code>2</code></td><td><code>BossHealthUpdater</code></td></tr><tr><td><code>3</code></td><td><code>SkillNameUpdater</code></td></tr><tr><td><code>4</code></td><td><code>SkillCostUpdater</code></td></tr><tr><td><code>5</code></td><td><code>AccelerationPhaseUpdater</code></td></tr><tr><td><code>6</code></td><td><code>AutoStateUpdater</code></td></tr></tbody></table><p><strong>example</strong>: 当<code>d_updater_mask</code> 被设置为 <code>0b1101</code> 则表示 <code>CostUpdater</code> , <code>SkillNameUpdater</code> 和 <code>SkillCostUpdater</code> 的 <code>update()</code> 函数需要被调用</p></li><li><p>数据更新多线程并行进行, 线程数量由配置中的<code>/auto_fight/d_update_max_thread</code>字段决定</p></li><li><p>数据更新任务提交至线程池的顺序由每个<code>updater</code>重写的<a href="/develop_doc/script/auto_fight_BaseDataUpdater.html#estimated-time-cost"><code>estimated_time_cost</code></a>决定, 按照更新耗时由小到大进行更新</p></li></ul><h2 id="基准测试-benchmark" tabindex="-1">基准测试(Benchmark) <a class="header-anchor" href="#基准测试-benchmark" aria-label="Permalink to “基准测试(Benchmark)”">​</a></h2><p>在不同的设备下测试了<strong>BAAS</strong>自动战斗各模块的性能, 数据仅供参考</p><h3 id="模拟器截图-控制速度测试" tabindex="-1">模拟器截图/控制速度测试 <a class="header-anchor" href="#模拟器截图-控制速度测试" aria-label="Permalink to “模拟器截图/控制速度测试”">​</a></h3><p>截图/控制速度主要与模拟器 和 CPU 有关, 推荐使用<code>雷电</code>模拟器 / <code>MuMu</code>模拟器</p><table tabindex="0"><thead><tr><th>CPU / 模拟器</th><th><code>雷电</code></th><th><code>MuMu</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>0.8ms - 2.5ms</code> 平均<code>1.5ms</code></td><td><code>1.9ms - 3.4ms</code> 平均<code>2.5ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td>-</td><td><code>4.9ms - 8.2ms</code> 平均<code>7.1ms</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td>-</td><td><code>12.1ms - 21.3ms</code> 平均<code>15.3ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>1.7ms - 6.8ms</code> 平均<code>3.5ms</code></td><td><code>4.2ms - 8.7ms</code> 平均<code>5.9ms</code></td></tr></tbody></table><ul><li>以上截图方式分别为 <ul><li>雷电 : ldopengl</li><li>MuMu : nemu</li></ul></li></ul><table tabindex="0"><thead><tr><th>CPU + 控制模式 / 模拟器</th><th><code>MuMu</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code>+<code>adb</code></td><td><code>4.9ms</code> - <code>7.1ms</code> 平均<code>6.1ms</code></td></tr><tr><td><code>Amd Ryzen 9 9950x</code>+<code>nemu</code></td><td><code>40us</code> - <code>90us</code> 平均<code>50us</code></td></tr><tr><td><code>Amd Ryzen 9 9950x</code>+<code>scrcpy</code></td><td><code>5.2ms</code> - <code>5.9ms</code> 平均<code>5.5ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code>+<code>adb</code></td><td><code>12.5ms</code> - <code>14.7ms</code> 平均<code>13.3ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code>+<code>nemu</code></td><td><code>43us</code> - <code>87us</code> 平均<code>59us</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code>+<code>scrcpy</code></td><td><code>5.6ms</code> - <code>5.7ms</code> 平均<code>5.6ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code>+<code>adb</code></td><td><code>11.9ms</code> - <code>16.3ms</code> 平均<code>13ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code>+<code>nemu</code></td><td><code>50us</code> - <code>110us</code> 平均<code>70us</code></td></tr><tr><td><code>Intel Core i9-13900HX</code>+<code>scrcpy</code></td><td><code>5.3ms</code> - <code>6.4ms</code> 平均<code>5.6ms</code></td></tr></tbody></table><h3 id="数据更新速度测试" tabindex="-1">数据更新速度测试 <a class="header-anchor" href="#数据更新速度测试" aria-label="Permalink to “数据更新速度测试”">​</a></h3><ol><li><p><code>纯CPU</code>更新数据</p><table tabindex="0"><thead><tr><th>CPU / 数据</th><th><code>Cost</code></th><th><code>SkillName</code></th><th><code>ObjPos</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>3us - 9us</code><br>平均<code>6us</code></td><td><code>1.8ms - 2.1ms</code><br>平均<code>2ms</code></td><td><code>33.1ms - 39.5ms</code><br>平均<code>35ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>6us - 28us</code><br>平均<code>15us</code></td><td><code>3.1ms - 4.5ms</code><br>平均<code>3.5ms</code></td><td><code>79.1ms - 91.0ms</code><br>平均<code>86ms</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>6us - 53us</code><br>平均<code>20us</code></td><td><code>10.4ms - 14.9ms</code><br>平均<code>12.5ms</code></td><td><code>159.3ms - 222.5ms</code><br>平均<code>175.5ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>3us - 19us</code><br>平均<code>7us</code></td><td><code>1.9ms - 5.4ms</code><br>平均<code>3.6ms</code></td><td><code>70.1ms - 107.0ms</code><br>平均<code>90ms</code></td></tr></tbody></table><table tabindex="0"><thead><tr><th>CPU / 数据</th><th><code>BossHealth</code></th><th><code>SkillCost</code></th><th><code>Acc</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>5.0ms - 9.0ms</code><br>平均<code>7.8ms</code></td><td><code>1.6ms - 3ms</code><br>平均<code>1.8ms</code></td><td><code>6us - 24us</code><br>平均<code>13us</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>35.0ms - 50.0ms</code><br>平均<code>39ms</code></td><td><code>6.4ms - 8.4ms</code><br>平均<code>7.5ms</code></td><td><code>14us - 21us</code><br>平均<code>20us</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>52.0ms - 79.3ms</code><br>平均<code>65ms</code></td><td><code>16.0ms - 22.7ms</code><br>平均<code>20.2ms</code></td><td><code>25us - 36us</code><br>平均<code>30us</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>31.4ms - 90.1ms</code><br>平均<code>60ms</code></td><td><code>5.1ms - 18.9ms</code><br>平均<code>8.5ms</code></td><td><code>13us - 23us</code><br>平均<code>16us</code></td></tr></tbody></table><ul><li><strong>note</strong>: <code>SkillCost</code>指更新一个槽技能的时间, 三个槽时间需要 x 3</li></ul><table tabindex="0"><thead><tr><th>CPU / 数据</th><th><code>Auto</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>9us - 24us</code><br>平均<code>16us</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>16us - 22us</code><br> 平均<code>20us</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>27us - 43us</code><br>平均<code>30us</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>13us - 23us</code><br>平均<code>19us</code></td></tr></tbody></table></li><li><p>YOLO模型推理 : <code>CUDA加速</code>和<code>纯CPU</code>速度对比</p></li></ol><table tabindex="0"><thead><tr><th>设备 / 数据</th><th><code>ObjPos</code></th></tr></thead><tbody><tr><td><code>RTX 5090</code></td><td><code>9.1ms - 11.0ms</code> <br>平均<code>10.1ms</code></td></tr><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>33.1ms - 39.5ms</code> <br>平均<code>35ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>79.1ms - 91.0ms</code> <br>平均<code>86ms</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>159.3ms - 222.5ms</code><br>平均<code>175.5ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>70.1ms - 107.0ms</code><br>平均<code>90ms</code></td></tr></tbody></table><h2 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to “基本配置”">​</a></h2><p>下图为一个轴文件的基本配置, 规定了一下自动战斗的基本信息</p><ol><li>Boss血量的文字识别配置</li><li>YOLO目标检测配置</li><li>出场角色以及所有出现的技能配置</li></ol><p>你可以在本文找到这些配置的含义, 一般来说, 你只需要设置 <code>3</code> 所相关的内容, 也就是<code>formation</code> 字段下的内容</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;formation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;front&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kayoko&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Koharu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mika&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Eimi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;back&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Himari&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fuuka (New Year)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;slot_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;all_appeared_skills&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Himari&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Kayoko&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Fuuka (New Year)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Mika&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Koharu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Eimi&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;BossHealth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;current_ocr_region&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">549</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">656</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;max_ocr_region&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">775</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ocr_region&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">549</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">775</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ocr_model_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en-us&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;yolo_setting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;best.onnx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;update_interval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="formation-front" tabindex="-1"><code>/formation/front</code> <a class="header-anchor" href="#formation-front" aria-label="Permalink to “/formation/front”">​</a></h3><ul><li><strong>description</strong>: 突击角色的名称列表</li><li><strong>type</strong>: <code>list</code></li><li><strong>elements</strong>: <ul><li><strong>description</strong>: 角色名称</li><li><strong>type</strong>: <code>string</code></li></ul></li><li><strong>note</strong>: <ol><li>这些名称直接决定了yolo模型检测的角色列表</li><li><code>resource/yolo_models/data.yaml</code> 中<code>names</code> 列举了所有可以被yolo模型识别的角色列表, 同时这也是<strong>BAAS</strong> YOLO模型的训练配置 <img src="`+E+'" alt="formation_names.png"></li><li>目前可识别的角色还较少, 随着数据集的逐渐扩充, <strong>BAAS</strong>将会适配大部分的学生 / 敌对角色 的识别, 如果你愿意为<strong>BAAS</strong>做一点贡献, 欢迎你参与数据集标注工作, 请在<a href="/usage_doc/qq_group_regulation/#qq群号">qq群</a>内联系作者</li></ol></li></ul><h3 id="formation-back" tabindex="-1"><code>/formation/back</code> <a class="header-anchor" href="#formation-back" aria-label="Permalink to “/formation/back”">​</a></h3><ul><li><strong>description</strong>: 后排角色的名称列表</li><li><strong>type</strong>: <code>list</code></li><li><strong>elements</strong>: <ul><li><strong>description</strong>: 角色名称</li><li><strong>type</strong>: <code>string</code></li></ul></li></ul><h3 id="formation-slot-count" tabindex="-1"><code>/formation/slot_count</code> <a class="header-anchor" href="#formation-slot-count" aria-label="Permalink to “/formation/slot_count”">​</a></h3><ul><li><strong>description</strong>: 技能槽的数量</li><li><strong>type</strong>: <code>unsigned int</code></li><li><strong>note</strong>: 一般设置为<code>3</code>, 未来可能会支持更多的技能槽(爬塔玩法中六槽)</li></ul><h3 id="formation-all-appeared-skills" tabindex="-1"><code>/formation/all_appeared_skills</code> <a class="header-anchor" href="#formation-all-appeared-skills" aria-label="Permalink to “/formation/all_appeared_skills”">​</a></h3><ul><li><strong>description</strong>: 所有出现的技能名称列表</li><li><strong>type</strong>: <code>list</code></li><li><strong>elements</strong>: <ul><li><strong>description</strong>: 技能名称</li><li><strong>type</strong>: <code>string</code></li></ul></li><li><strong>note</strong>:</li></ul><ol><li><strong>BAAS</strong>自动战斗在检测技能时, 只会检测该配置列出的技能</li><li>你可以在<code>/resource/images/CN/zh-cn/skill/active</code>查询已被录入的技能, 这个列表的技能名与该文件夹下的图片名一一对应 <img src="'+_+`" alt="auto_fight_skill_templates"></li></ol><h3 id="bosshealth-current-ocr-region" tabindex="-1"><code>/BossHealth/current_ocr_region</code> <a class="header-anchor" href="#bosshealth-current-ocr-region" aria-label="Permalink to “/BossHealth/current_ocr_region”">​</a></h3><ul><li><strong>description</strong>: BOSS当前血量的文字识别区域</li><li><strong>type</strong>: <code>list</code></li><li><strong>length</strong>: <code>4</code></li><li><strong>elements</strong>: <ul><li><strong>description</strong>: 文字识别区域的坐标, 由四个整数值组成, 分别表示<code>左上角x坐标</code>, <code>左上角y坐标</code>, <code>右下角x坐标</code>, <code>右下角y坐标</code></li><li><strong>type</strong>: <code>int</code></li></ul></li></ul><h3 id="bosshealth-max-ocr-region" tabindex="-1"><code>/BossHealth/max_ocr_region</code> <a class="header-anchor" href="#bosshealth-max-ocr-region" aria-label="Permalink to “/BossHealth/max_ocr_region”">​</a></h3><ul><li><strong>description</strong>: BOSS最大血量的文字识别区域</li><li><strong>type</strong>: <code>list</code></li><li><strong>length</strong>: <code>4</code></li><li><strong>elements</strong>: <ul><li><strong>type</strong>: <code>int</code></li></ul></li><li><strong>note</strong>: 这个区域的坐标填写和<code>/BossHealth/current_ocr_region</code>相同, 但是它的坐标是<strong>BOSS最大血量</strong>的坐标</li></ul><h3 id="bosshealth-ocr-region" tabindex="-1"><code>/BossHealth/ocr_region</code> <a class="header-anchor" href="#bosshealth-ocr-region" aria-label="Permalink to “/BossHealth/ocr_region”">​</a></h3><ul><li><strong>description</strong>: BOSS血量的文字识别区域</li><li><strong>type</strong>: <code>list</code></li><li><strong>length</strong>: <code>4</code></li><li><strong>elements</strong>: <ul><li><strong>type</strong>: <code>int</code></li></ul></li><li><strong>note</strong>: 这个区域的坐标同时包含最大血量和当前血量</li></ul><h3 id="bosshealth-ocr-model-name" tabindex="-1"><code>/BossHealth/ocr_model_name</code> <a class="header-anchor" href="#bosshealth-ocr-model-name" aria-label="Permalink to “/BossHealth/ocr_model_name”">​</a></h3><ul><li><p><strong>description</strong>: 文字识别模型的名称</p></li><li><p><strong>type</strong>: <code>string</code></p></li><li><p><strong>constrains</strong>:</p><ul><li><table tabindex="0"><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>en-us</code></td><td>英文模型</td></tr><tr><td><code>zh-cn</code></td><td>v4简体中文模型</td></tr><tr><td><code>zh-cn_v3</code></td><td>v3简体中文模型</td></tr><tr><td><code>ru-ru</code></td><td>俄文模型</td></tr><tr><td><code>ja-jp</code></td><td>日文模型</td></tr><tr><td><code>zh-tw</code></td><td>繁体中文模型</td></tr><tr><td><code>ko-kr</code></td><td>韩文模型</td></tr></tbody></table></li></ul></li><li><p><strong>note</strong>: 一般不需要修改</p></li></ul><h3 id="yolo-setting-model" tabindex="-1"><code>/yolo_setting/model</code> <a class="header-anchor" href="#yolo-setting-model" aria-label="Permalink to “/yolo_setting/model”">​</a></h3><ul><li><strong>description</strong>: YOLO模型的名称</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <ul><li><table tabindex="0"><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>best.onnx</code></td><td>fp32模型</td></tr><tr><td><code>best_fp16.onnx</code></td><td>fp16模型</td></tr></tbody></table></li></ul></li></ul><h3 id="yolo-setting-update-inverval" tabindex="-1"><code>/yolo_setting/update_inverval</code> <a class="header-anchor" href="#yolo-setting-update-inverval" aria-label="Permalink to “/yolo_setting/update_inverval”">​</a></h3><ul><li><strong>description</strong>: 我们不希望每一张截图都更新目标位置, 设定一定间隔更新</li><li><strong>type</strong>: <code>unsigned int</code></li><li><strong>note</strong>: 单位为<code>ms</code>, 值越小, 更新频率越快, cpu/gpu的负载越高</li></ul><h2 id="状态-state" tabindex="-1">状态(State) <a class="header-anchor" href="#状态-state" aria-label="Permalink to “状态(State)”">​</a></h2><h3 id="states" tabindex="-1"><code>states</code> <a class="header-anchor" href="#states" aria-label="Permalink to “states”">​</a></h3><ol><li>所有状态都在<code>states</code>中定义, 它是一个字典, 每个键值对表示一个状态, <code>键表示状态名</code>, 值表示状态的参数</li></ol><p><strong>example</strong>:</p><ol><li>下图在<code>states</code>中定义了三个状态, <code>状态一</code> / <code>状态二</code> / <code>状态三</code>, 起始状态为<code>状态一</code></li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;state_state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;状态一&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;states&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;状态一&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;状态二&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;状态三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="单个state的参数" tabindex="-1">单个<code>state</code>的参数 <a class="header-anchor" href="#单个state的参数" aria-label="Permalink to “单个state的参数”">​</a></h3><p><a href="#states"><code>states</code></a> 中的例子列举了三个状态, 但是他们并没有任何实际内容, 我们需要在单个状态中设置以下参数以赋予状态意义</p><ol><li><a href="#action"><code>action</code></a></li><li><a href="#action-fail-transition"><code>action_fail_transition</code></a></li><li><a href="#transitions"><code>transitions</code></a></li><li><a href="#default-transition"><code>default_transition</code></a></li></ol><p><strong>note</strong>: 以上个参数都是可选的, 你可以根据需要自行选择</p><h4 id="action" tabindex="-1"><code>action</code> <a class="header-anchor" href="#action" aria-label="Permalink to “action”">​</a></h4><ul><li><strong>description</strong>: 到达这个状态后立即执行的行为（如技能释放, 开启auto/倍速, 重开战斗, 尝试跳过转阶段动画等)</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <strong>动作引用</strong>必须在<a href="#actions"><code>actions</code></a>中被定义</li></ul><h4 id="action-fail-transition" tabindex="-1"><code>action_fail_transition</code> <a class="header-anchor" href="#action-fail-transition" aria-label="Permalink to “action_fail_transition”">​</a></h4><ul><li><strong>description</strong>: 当<code>action</code>执行失败时(如未跳过转阶段动画时), 自动战斗会转移到这个状态</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <strong>状态引用</strong>必须在<a href="#states"><code>states</code></a>中被定义</li></ul><h4 id="transitions" tabindex="-1"><code>transitions</code> <a class="header-anchor" href="#transitions" aria-label="Permalink to “transitions”">​</a></h4><ul><li><strong>description</strong>: 指示<code>action</code>结束后的状态转移, 它是一个<code>列表</code>, 每个元素表示<a href="#一个状态转移">一个状态转移</a></li><li><strong>type</strong>: <code>list</code><ul><li><strong>elements</strong>: <ul><li><code>dict</code> : 每个元素表示<a href="#一个状态转移">一个状态转移</a></li></ul></li></ul></li></ul><h4 id="一个状态转移" tabindex="-1">一个状态转移 <a class="header-anchor" href="#一个状态转移" aria-label="Permalink to “一个状态转移”">​</a></h4><p>每个状态转移转移表示在某个条件成立时转移到下一个状态, 我们需要指定<code>条件</code> 和 <code>下一个状态</code>, 分别对应以下参数</p><ol><li><p><code>condition</code></p><ul><li><strong>description</strong>: 状态转移的条件名</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <strong>条件引用</strong>必须在<a href="#conditions"><code>conditions</code></a>中被定义</li></ul></li><li><p><code>next</code></p><ul><li><strong>description</strong>: 状态转移的下一个状态名</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <strong>状态引用</strong>必须在<a href="#states"><code>states</code></a>中被定义</li></ul></li></ol><h4 id="default-transition" tabindex="-1"><code>default_transition</code> <a class="header-anchor" href="#default-transition" aria-label="Permalink to “default_transition”">​</a></h4><ol><li>当<code>transitions</code>中的<strong>所有条件</strong>都不被满足时(或<code>transitions</code>没有任何条件), 默认转移状态</li></ol><h3 id="start-state" tabindex="-1"><code>start_state</code> <a class="header-anchor" href="#start-state" aria-label="Permalink to “start_state”">​</a></h3><ul><li><strong>description</strong>: 自动战斗开始时的初始状态</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <strong>状态引用</strong>必须在<a href="#states"><code>states</code></a>中被定义</li><li><strong>note</strong>: 它<strong>必须</strong>在自动战斗流程文件中被定义, 指示自动战斗开始时的进入的状态</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to “示例”">​</a></h3><p><strong>example</strong>:</p><ol><li>当自动战斗转移到这个状态时, 会立即执行<code>释放技能一</code></li><li>如果释放技能失败, 转移到<code>重新开始战斗</code></li><li>如果释放技能成功, 并且<code>boss血量小于500w</code>, 转移到<code>释放技能二</code></li><li>否则转移到<code>重新开始战斗</code></li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;状态一&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;释放技能一&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;action_fail_transition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;重新开始战斗&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;transitions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;condition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boss血量小于500w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;释放技能二&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default_transition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;重新开始战斗&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>note</strong>:这个例子中的<code>action</code> 以及 <code>condition</code> 都还未被定义, 你需要在<a href="#动作action"><code>actions</code></a> 和 <a href="#条件condition"><code>conditions</code></a>中学习如何定义这些动作和条件</p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h3><ol><li>初始状态<code>start_state</code><strong>必须被定义</strong></li><li>结束条件: 自动战斗会在<strong>没有任何可转移状态</strong>时退出循环, 可能情况如下: <ul><li><code>transitions</code>中任何条件都不成立, 并且没有<code>default_transition</code></li><li><code>transitions</code>中没有条件, 并且没有<code>default_transition</code></li></ul></li><li>值得一提的是, 没有<code>default_transition</code>, 自动战斗也可以实现它的功能, 你只需要找到所有其他都不成立的条件, 并将其作为transition的最后一个条件也可以实现<code>default_transition</code>的功能</li></ol><h2 id="动作-action" tabindex="-1">动作(Action) <a class="header-anchor" href="#动作-action" aria-label="Permalink to “动作(Action)”">​</a></h2><h3 id="actions" tabindex="-1"><code>actions</code> <a class="header-anchor" href="#actions" aria-label="Permalink to “actions”">​</a></h3><ol><li>所有动作都在<code>actions</code>中定义, 它是一个字典, 每个键值对表示一个动作序列, <code>键表示动作名</code>, 值是一个<strong>列表</strong></li><li>注意再次强调, 每个<code>action</code>的值是一个<strong>列表</strong>, 这个列表中的<strong>每个元素</strong>表示<a href="#单个action的参数"><code>一个动作</code></a>, 你可以将它理解为一个动作序列, 这个动作序列会被依次执行</li></ol><p><strong>example</strong>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;actions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;释放技能1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;释放技能1的第一个操作&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;释放技能1的第二个操作&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;释放技能2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;释放技能2的第一个操作&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>note</strong>: 设置单一<code>action</code>是一个动作列表有许多好处, 如下</p><ol><li>允许你自由定义技能释放流程 <ul><li>释放完第一个技能后你可以立刻释放第二个技能, 实现游戏中<code>反手拐</code>(在主c技能释放后释放辅助增伤技能)的效果</li><li>释放技能前你可以选择调整游戏倍速为<code>1</code></li><li>释放技能后你可以选择调整游戏倍速回到<code>3</code></li></ul></li><li>简化了<code>state</code>的书写 <ul><li><code>state</code>仅需指定<code>action</code>的名称, 而不需要重写所有<code>action</code></li></ul></li></ol><h3 id="单个action的参数" tabindex="-1">单个<code>action</code>的参数 <a class="header-anchor" href="#单个action的参数" aria-label="Permalink to “单个action的参数”">​</a></h3><p><a href="#actions"><code>actions</code></a> 中的例子列举了一些动作, 但是他们并没有任何实际内容, 我们需要在单个动作中设置以下参数以赋予状态意义</p><ol><li>首先你需要通过<code>t</code>字段指定<code>action</code>的类型, 合法的<code>t</code>如下, 接着你需要根据<code>t</code>的值设置额外参数 <ul><li><table tabindex="0"><thead><tr><th><code>t</code></th><th><code>含义</code></th><th>额外需要的设置的参数</th></tr></thead><tbody><tr><td><code>acc</code></td><td>调整游戏<code>倍速</code></td><td><a href="/develop_doc/script/auto_fight_action_acc.html#额外参数"><code>acc动作额外参数</code></a></td></tr><tr><td><code>auto</code></td><td>调整游戏<code>auto</code>状态</td><td><a href="/develop_doc/script/auto_fight_action_auto.html#额外参数"><code>auto动作额外参数</code></a></td></tr><tr><td><code>skill</code></td><td>释放技能</td><td><a href="/develop_doc/script/auto_fight_action_skill.html#额外参数"><code>skill动作额外参数</code></a></td></tr></tbody></table></li></ul></li></ol><h2 id="条件-condition" tabindex="-1">条件(Condition) <a class="header-anchor" href="#条件-condition" aria-label="Permalink to “条件(Condition)”">​</a></h2><h3 id="conditions" tabindex="-1"><code>conditions</code> <a class="header-anchor" href="#conditions" aria-label="Permalink to “conditions”">​</a></h3><ol><li>所有条件都在<code>conditions</code>中定义, 它是一个字典, 每个键值对表示一个条件序列, <code>键表示条件名</code>, 值是一个<strong>字典</strong></li></ol><p><strong>example</strong>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;conditions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;条件1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;条件2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="单个condition的参数" tabindex="-1">单个<code>condition</code>的参数 <a class="header-anchor" href="#单个condition的参数" aria-label="Permalink to “单个condition的参数”">​</a></h3><p><a href="#conditions"><code>conditions</code></a> 中的例子列举了两个条件, 但是他们并没有任何实际内容, 我们需要在单个条件中设置以下参数以赋予状态意义</p><ol><li><p>首先你需要通过<code>type</code>字段指定<code>condition</code>的类型, 合法的<code>type</code>如下, 接着你需要根据<code>type</code>的值设置额外参数</p><ul><li><table tabindex="0"><thead><tr><th><code>type</code></th><th><code>含义</code></th><th>额外需要的设置的参数</th></tr></thead><tbody><tr><td><code>and_combined</code></td><td>组合条件<br>若干条件同时成立时才成立的</td><td><a href="/develop_doc/script/auto_fight_condition_and_combined.html#额外参数"><code>and_combined条件额外参数</code></a></td></tr><tr><td><code>or_combined</code></td><td>组合条件<br>若干条件中任意一个成立就成立</td><td><a href="/develop_doc/script/auto_fight_condition_or_combined.html#额外参数"><code>or_combined条件额外参数</code></a></td></tr><tr><td><code>skill_name</code></td><td>技能名称相关</td><td><a href="/develop_doc/script/auto_fight_condition_skill_name.html#额外参数"><code>skill_name条件额外参数</code></a></td></tr><tr><td><code>cost</code></td><td>费用相关</td><td><a href="/develop_doc/script/auto_fight_condition_cost.html#额外参数"><code>cost条件额外参数</code></a></td></tr><tr><td><code>boss_health</code></td><td>boss血量相关</td><td><a href="/develop_doc/script/auto_fight_condition_boss_health.html#额外参数"><code>boss_health条件额外参数</code></a></td></tr></tbody></table></li></ul></li><li><p>可选参数</p><ul><li><a href="#timeout"><code>timeout</code></a></li><li><a href="#and"><code>and</code></a></li><li><a href="#or"><code>or</code></a></li></ul></li></ol><h4 id="timeout" tabindex="-1"><code>timeout</code> <a class="header-anchor" href="#timeout" aria-label="Permalink to “timeout”">​</a></h4><p><strong>description</strong>: 判断这个条件成立的时限, <strong>超时则认为该条件不成立</strong></p><ul><li><strong>type</strong>: <code>unsigned int</code></li><li><strong>note</strong>: <ol><li>这个参数的设计是为了避免条件判断陷入死循环</li><li>单位为<code>ms</code>, 默认为<code>5000</code></li></ol></li></ul><h4 id="and" tabindex="-1"><code>and</code> <a class="header-anchor" href="#and" aria-label="Permalink to “and”">​</a></h4><p><strong>description</strong>: 你可以指定一系列条件, 当前条件成立时, 这些条件必须同时成立(加强条件的成立要求)</p><ul><li><strong>type</strong>: <code>list</code><ul><li><strong>elements</strong>: <ul><li><strong>description</strong>: 需要同时成立条件的名称</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <strong>条件引用</strong>必须在<a href="#conditions"><code>conditions</code></a>中被定义</li></ul></li></ul></li></ul><h4 id="or" tabindex="-1"><code>or</code> <a class="header-anchor" href="#or" aria-label="Permalink to “or”">​</a></h4><p><strong>description</strong>: 你可以指定一系列条件, 如果它们中任意一个成立, 当前条件也会被视为成立(可以理解为一种补救措施, 减弱条件成立要求)</p><ul><li><strong>type</strong>: <code>list</code><ul><li><strong>elements</strong>: <ul><li><strong>description</strong>: 补救条件的名称</li><li><strong>type</strong>: <code>string</code></li><li><strong>constrains</strong>: <strong>条件引用</strong>必须在<a href="#conditions"><code>conditions</code></a>中被定义</li></ul></li></ul></li></ul><p><strong>note</strong>: 一个条件存在<code>本体</code>, <code>与条件</code>和 <code>或条件</code>, 它们共同决定了条件成立与否, 具体逻辑如下</p><ol><li>在一轮截图 + 数据更新后进行条件判断 <ul><li><code>本体</code>待定, 某个<code>与条件</code>不成立, 则认为整体条件不成立</li><li><code>本体</code>待定, 某个<code>或条件</code>成立, 则认为整体条件成立</li><li><code>本体</code>待定, 没有不成立的<code>与条件</code>, 且没有成立的<code>或条件</code>, 则继续进行截图 + 数据更新</li><li><code>本体</code>成立, 某个<code>与条件</code>不成立, 则认为整体条件不成立</li><li><code>本体</code>成立, 没有不成立的<code>与条件</code>, 且有待定的<code>与条件</code>, 则继续进行截图 + 数据更新</li><li><code>本体</code>不成立, 某个<code>或条件</code>成立, 则认为整体条件成立</li><li><code>本体</code>不成立, 没有成立的<code>或条件</code>, 且有待定的<code>或条件</code>, 则继续进行截图 + 数据更新</li></ul></li></ol><h3 id="条件类-condition-class" tabindex="-1">条件类(Condition Class) <a class="header-anchor" href="#条件类-condition-class" aria-label="Permalink to “条件类(Condition Class)”">​</a></h3><p>我们希望<a href="#可监测的数据">可监测的数据</a>满足一些条件时进行自动化操作, 条件类让我们能用一种规范的语言表达我们所需要的条件</p><ol><li>为了持续监测条件 <ul><li>在循环中依次执行 <code>截图 --&gt; 数据更新 --&gt; 条件判断</code></li><li>数据更新前, 遍历每个<code>condition</code>, 通过标志位指示需要被更新的数据</li><li>数据更新前, 首先判断界面是否为战斗中, 非战斗中则重新截图</li><li>数据更新前, 等待正在更新数据线程数为<code>0</code> (防止同一数据更新同时进行)</li><li>由上一条可得, 如果<code>一条数据</code>不被当前<code>任意一个condition</code>所需要, 则不更新会该数据</li><li>当某一条件成立 / 所有条件不成立时结束判断</li></ul></li><li>单一状态信息更新后<strong>紧接着</strong>进行条件判断 <ul><li>条件判断的耗时远低于数据更新, 如果有多条数据同时在更新, 其中一条数据更新完毕后立即进行条件判断</li></ul></li><li>根据<a href="#可监测的数据">可监测的数据</a>中任意<strong>一个</strong>进行比较的条件称为<code>原始条件 (primitive condition)</code></li><li>条件可根据<code>or / and</code>进行自由组合, 称为<code>组合条件</code></li><li>每个条件包含<code>timeout</code>字段 <ul><li>条件判断开始后时限内期望条件未被判断为(未)成立则认为该条件不成立</li><li>设计<code>timeout</code>的一大原因是可以有效避免条件判断陷入死循环</li></ul></li><li>条件类仅在加载自动战斗工作流时初始化, 条件类可被重复使用, 每次使用<code>condition</code>前刷新上一次使用的数据</li><li><code>desc</code>字段作为这个条件的描述, 方便理解, 并不会对条件判断产生任何影响</li></ol><h3 id="条件判断-condition-judgement" tabindex="-1">条件判断 (Condition Judgement) <a class="header-anchor" href="#条件判断-condition-judgement" aria-label="Permalink to “条件判断 (Condition Judgement)”">​</a></h3><p>按照下图的架构实现自动战斗的条件判断, 该架构设计参照<a href="#条件类-condition-class">条件类</a>所需的特性 <img src="`+m+`" alt="condition_judgement.png"></p><h2 id="使用前须知" tabindex="-1">使用前须知 <a class="header-anchor" href="#使用前须知" aria-label="Permalink to “使用前须知”">​</a></h2><h3 id="必要的游戏内设置" tabindex="-1">必要的游戏内设置 <a class="header-anchor" href="#必要的游戏内设置" aria-label="Permalink to “必要的游戏内设置”">​</a></h3><ol><li><strong>必须关闭游戏内释放技能动画</strong></li></ol><h2 id="轴的基本信息" tabindex="-1">轴的基本信息 <a class="header-anchor" href="#轴的基本信息" aria-label="Permalink to “轴的基本信息”">​</a></h2><h3 id="name-轴名称" tabindex="-1"><code>name</code> (轴名称) <a class="header-anchor" href="#name-轴名称" aria-label="Permalink to “name (轴名称)”">​</a></h3><ul><li><strong>description</strong>: 轴的名称</li><li><strong>type</strong>: <code>string</code></li><li><strong>example</strong>: 特殊委托关卡L, 使用女仆爱丽丝的通关轴</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Special-Task-L Aris Maid Workflow&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="formation-配队信息" tabindex="-1">formation (配队信息) <a class="header-anchor" href="#formation-配队信息" aria-label="Permalink to “formation (配队信息)”">​</a></h3><h3 id="完整组合" tabindex="-1">完整组合 <a class="header-anchor" href="#完整组合" aria-label="Permalink to “完整组合”">​</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Special-Task-L Aris Maid Workflow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;formation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;front&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Aris (Maid)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wakamo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kayoko (New Year)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;back&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ako&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Himari&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;initial_skills&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wakamo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ako&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Himari&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;all_appeared_skills&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Aris (Maid)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Wakamo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Kayoko (New Year)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Ako&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Himari&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;borrow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;battle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;boss_max_health&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">188796</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">224756</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">260729</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">287696</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">323657</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h1 id="class-autofight" tabindex="-1"><code>Class AutoFight</code> <a class="header-anchor" href="#class-autofight" aria-label="Permalink to “Class AutoFight”">​</a></h1><ul><li><strong>description</strong>: 集成 condition / action / state 并最终执行自动战斗的类</li></ul><h2 id="成员变量-members" tabindex="-1">成员变量 (Members) <a class="header-anchor" href="#成员变量-members" aria-label="Permalink to “成员变量 (Members)”">​</a></h2><h3 id="config" tabindex="-1"><code>config</code> <a class="header-anchor" href="#config" aria-label="Permalink to “config”">​</a></h3><h3 id="logger" tabindex="-1"><code>logger</code> <a class="header-anchor" href="#logger" aria-label="Permalink to “logger”">​</a></h3><h3 id="default-active-skill-template-default-inactive-skill-template" tabindex="-1"><code>default_active_skill_template</code> / <code>default_inactive_skill_template</code> <a class="header-anchor" href="#default-active-skill-template-default-inactive-skill-template" aria-label="Permalink to “default_active_skill_template / default_inactive_skill_template”">​</a></h3><h3 id="template-j-ptr-prefix" tabindex="-1"><code>template_j_ptr_prefix</code> <a class="header-anchor" href="#template-j-ptr-prefix" aria-label="Permalink to “template_j_ptr_prefix”">​</a></h3><h3 id="d-update-max-thread" tabindex="-1"><code>d_update_max_thread</code> <a class="header-anchor" href="#d-update-max-thread" aria-label="Permalink to “d_update_max_thread”">​</a></h3><p><strong>type</strong>: int <strong>description</strong>: 数据更新最大同时运行的线程数量 (线程池大小)</p><h2 id="d-update-thread-pool" tabindex="-1"><code>d_update_thread_pool</code> <a class="header-anchor" href="#d-update-thread-pool" aria-label="Permalink to “d_update_thread_pool”">​</a></h2><p><strong>type</strong>: <code>std::unique_ptr&lt;ThreadPool&gt;</code><strong>description</strong>: 数据更新使用的线程池</p><h2 id="d-update-thread-mutex" tabindex="-1"><code>d_update_thread_mutex</code> <a class="header-anchor" href="#d-update-thread-mutex" aria-label="Permalink to “d_update_thread_mutex”">​</a></h2><p><strong>type</strong>: <code>std::mutex</code><strong>description</strong>: 用于线程同步的互斥量</p><h2 id="d-updater-running-thread-count" tabindex="-1"><code>d_updater_running_thread_count</code> <a class="header-anchor" href="#d-updater-running-thread-count" aria-label="Permalink to “d_updater_running_thread_count”">​</a></h2><p><strong>type</strong>: <code>std::atomic&lt;int&gt;</code><strong>description</strong>: 当前正在运行的数据更新线程数量</p><h2 id="d-updater-thread-finish-notifier" tabindex="-1"><code>d_updater_thread_finish_notifier</code> <a class="header-anchor" href="#d-updater-thread-finish-notifier" aria-label="Permalink to “d_updater_thread_finish_notifier”">​</a></h2><p><strong>type</strong>: <code>std::condition_variable</code><strong>description</strong>: 用于通知数据更新线程结束的条件变量</p><h2 id="d-updaters" tabindex="-1"><code>d_updaters</code> <a class="header-anchor" href="#d-updaters" aria-label="Permalink to “d_updaters”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::unique_ptr&lt;BaseDataUpdater&gt;&gt;</code><strong>description</strong>: 指向所有数据更新类的指针集合</p><h2 id="d-wait-to-update-idx" tabindex="-1"><code>d_wait_to_update_idx</code> <a class="header-anchor" href="#d-wait-to-update-idx" aria-label="Permalink to “d_wait_to_update_idx”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;uint8_t&gt;</code><strong>description</strong>: 需要被执行的数据更新函数所对应的类在<a href="#d-updaters"><code>d_updaters</code></a>中的索引</p><h2 id="d-updater-queue" tabindex="-1"><code>d_updater_queue</code> <a class="header-anchor" href="#d-updater-queue" aria-label="Permalink to “d_updater_queue”">​</a></h2><p><strong>type</strong>: <code>std::queue&lt;uint8_t&gt;</code><strong>description</strong>: 根据数据更新的预估耗时排序后的<code>d_wait_to_update_idx</code>队列</p><h2 id="d-updater-map" tabindex="-1"><code>d_updater_map</code> <a class="header-anchor" href="#d-updater-map" aria-label="Permalink to “d_updater_map”">​</a></h2><p><strong>type</strong>: <code>std::map&lt;std::string, uint64_t&gt;</code><strong>description</strong>: 数据更新类的名称与偏移的映射</p><h2 id="d-auto-f" tabindex="-1"><code>d_auto_f</code> <a class="header-anchor" href="#d-auto-f" aria-label="Permalink to “d_auto_f”">​</a></h2><p><strong>type</strong>: <code>auto_fight_d</code><strong>description</strong>: 自动战斗的共享数据, 用于在 <code>action</code> / <code>condition</code> / <code>updaters</code> / <code>state</code> 之间传递数据</p><h2 id="cond-type" tabindex="-1"><code>_cond_type</code> <a class="header-anchor" href="#cond-type" aria-label="Permalink to “_cond_type”">​</a></h2><p><strong>type</strong>: <code>std::string</code><strong>description</strong>: 目前正在录入的条件的类型名称</p><h2 id="all-cond" tabindex="-1"><code>all_cond</code> <a class="header-anchor" href="#all-cond" aria-label="Permalink to “all_cond”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::unique_ptr&lt;BaseCondition&gt;&gt;</code><strong>description</strong>: 所有条件的指针集合</p><h2 id="cond-name-idx-map" tabindex="-1"><code>cond_name_idx_map</code> <a class="header-anchor" href="#cond-name-idx-map" aria-label="Permalink to “cond_name_idx_map”">​</a></h2><p><strong>type</strong>: <code>std::map&lt;std::string, uint64_t&gt;</code><strong>description</strong>: 条件名与<a href="#all-cond"><code>all_cond</code></a>中位置的映射 <strong>note</strong>:</p><ol><li>请注意<strong>条件名</strong>与<strong>条件类型名</strong>是完全不同的概念</li></ol><h2 id="cond-is-matched-recorder" tabindex="-1"><code>_cond_is_matched_recorder</code> <a class="header-anchor" href="#cond-is-matched-recorder" aria-label="Permalink to “_cond_is_matched_recorder”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;bool&gt;</code><strong>description</strong>: 记录条件是否成立, 已被判断成立 / 不成立的条件不会参与以下内容</p><ol><li>超时检查</li><li>条件成立判断</li></ol><p><strong>note</strong>:</p><ol><li>长度与<a href="#all-cond"><code>all_cond</code></a>相同</li></ol><h2 id="cond-checked" tabindex="-1"><code>_cond_checked</code> <a class="header-anchor" href="#cond-checked" aria-label="Permalink to “_cond_checked”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;bool&gt;</code><strong>description</strong>: 条件的 超时监测 / 重置状态 / 成立判断 是递归进行的, 记录每一项检查过的条件, 避免无限递归 <strong>note</strong>:</p><ol><li>长度与<a href="#all-cond"><code>all_cond</code></a>相同</li></ol><h2 id="all-state" tabindex="-1"><code>all_state</code> <a class="header-anchor" href="#all-state" aria-label="Permalink to “all_state”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;state_info&gt;</code><strong>description</strong>: 所有状态集合</p><h2 id="state-trans-name-recorder" tabindex="-1"><code>_state_trans_name_recorder</code> <a class="header-anchor" href="#state-trans-name-recorder" aria-label="Permalink to “_state_trans_name_recorder”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::vector&lt;std::string&gt;&gt;</code><strong>description</strong>: 每个state可能有多个状态转移, 记录每个状态的每个状态转移的下一个状态名 <strong>note</strong>: 当一个状态初始化时, 可能它的目标状态未初始化, 此时不知道该状态的索引, 该变量记录所有转移的下一个状态名, 以便再次遍历更新索引</p><h2 id="state-default-trans-name-recorder" tabindex="-1"><code>_state_default_trans_name_recorder</code> <a class="header-anchor" href="#state-default-trans-name-recorder" aria-label="Permalink to “_state_default_trans_name_recorder”">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::optional&lt;std::string&gt;&gt;</code><strong>description</strong>: 作用同<a href="#state-trans-name-recorder"><code>_state_trans_name_recorder</code></a>, 使用<code>optional</code>原因为<code>state</code>允许没有默认转移</p><h2 id="state-name-idx-map" tabindex="-1"><code>state_name_idx_map</code> <a class="header-anchor" href="#state-name-idx-map" aria-label="Permalink to “state_name_idx_map”">​</a></h2><p><strong>type</strong>: <code>std::map&lt;std::string, uint64_t&gt;</code><strong>description</strong>: 状态名与<a href="#all-state"><code>all_state</code></a>中位置的映射</p><h2 id="curr-state-idx" tabindex="-1"><code>_curr_state_idx</code> <a class="header-anchor" href="#curr-state-idx" aria-label="Permalink to “_curr_state_idx”">​</a></h2><p><strong>type</strong>: <code>uint64_t</code><strong>description</strong>: 当前状态的索引</p><h2 id="state-cond-j-start-t" tabindex="-1"><code>_state_cond_j_start_t</code> <a class="header-anchor" href="#state-cond-j-start-t" aria-label="Permalink to “_state_cond_j_start_t”">​</a></h2><p><strong>type</strong>: <code>long long</code><strong>description</strong>: 状态转移 条件判断循环的开始时间(ms)</p><h2 id="state-cond-j-loop-start-t" tabindex="-1"><code>_state_cond_j_loop_start_t</code> <a class="header-anchor" href="#state-cond-j-loop-start-t" aria-label="Permalink to “_state_cond_j_loop_start_t”">​</a></h2><p><strong>type</strong>: <code>long long</code><strong>description</strong>: 状态转移 条件判断循环每一轮循环的开始时间(ms)</p><h2 id="state-cond-j-elapsed-t" tabindex="-1"><code>_state_cond_j_elapsed_t</code> <a class="header-anchor" href="#state-cond-j-elapsed-t" aria-label="Permalink to “_state_cond_j_elapsed_t”">​</a></h2><p><strong>type</strong>: <code>long long</code><strong>description</strong>: 状态转移 条件判断循环的总耗时(ms)</p><h2 id="state-trans-cond-matched-idx" tabindex="-1"><code>_state_trans_cond_matched_idx</code> <a class="header-anchor" href="#state-trans-cond-matched-idx" aria-label="Permalink to “_state_trans_cond_matched_idx”">​</a></h2><p><strong>type</strong>: <code>std::optional&lt;uint64_t&gt;</code><strong>description</strong>: 第一个状态转移条件成立的转移索引</p><h2 id="state-flg-all-trans-cond-dissatisfied" tabindex="-1"><code>_state_flg_all_trans_cond_dissatisfied</code> <a class="header-anchor" href="#state-flg-all-trans-cond-dissatisfied" aria-label="Permalink to “_state_flg_all_trans_cond_dissatisfied”">​</a></h2><p><strong>type</strong>: <code>bool</code><strong>description</strong>: 指示是否所有状态转移条件都不成立</p><h2 id="state-cond-j-loop-running-flg" tabindex="-1"><code>_state_cond_j_loop_running_flg</code> <a class="header-anchor" href="#state-cond-j-loop-running-flg" aria-label="Permalink to “_state_cond_j_loop_running_flg”">​</a></h2><p><strong>type</strong>: <code>bool</code><strong>description</strong>: 指示条件判断循环是否正在运行</p><h2 id="start-state-name" tabindex="-1"><code>start_state_name</code> <a class="header-anchor" href="#start-state-name" aria-label="Permalink to “start_state_name”">​</a></h2><p><strong>type</strong>: <code>std::string</code><strong>description</strong>: 初始状态的名称</p><h2 id="workflow-path" tabindex="-1"><code>workflow_path</code> <a class="header-anchor" href="#workflow-path" aria-label="Permalink to “workflow_path”">​</a></h2><p><strong>type</strong>: <code>std::filesystem::path</code><strong>description</strong>: 轴文件的路径</p><h2 id="workflow-name" tabindex="-1"><code>workflow_name</code> <a class="header-anchor" href="#workflow-name" aria-label="Permalink to “workflow_name”">​</a></h2><p><strong>type</strong>: <code>std::string</code><strong>description</strong>: 轴的名称</p><h2 id="baas" tabindex="-1"><code>baas</code> <a class="header-anchor" href="#baas" aria-label="Permalink to “baas”">​</a></h2><p><strong>type</strong>: <code>BAAS*</code><strong>description</strong>: <code>BAAS</code>实例</p>`,205)]))}const v=t(y,[["render",b]]);export{P as __pageData,v as default};
