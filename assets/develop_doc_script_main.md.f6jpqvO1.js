import{_ as e,c as i,o,ah as l}from"./chunks/framework.DaDXF32t.js";const p=JSON.parse('{"title":"Documentation for main.py","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/main.md","filePath":"develop_doc/script/main.md","lastUpdated":1759412563000}'),r={name:"develop_doc/script/main.md"};function d(c,a,t,n,h,s){return o(),i("div",null,a[0]||(a[0]=[l('<p>以下是根据您提供的代码生成的完整 Markdown 文档，包含类的每个函数、成员的参数和返回值说明。如果部分信息无法直接从代码中提取（例如参数含义或返回值），会标注为 &quot;无具体说明&quot;：</p><hr><h1 id="documentation-for-main-py" tabindex="-1">Documentation for <code>main.py</code> <a class="header-anchor" href="#documentation-for-main-py" aria-label="Permalink to “Documentation for main.py”">​</a></h1><h2 id="class-main" tabindex="-1">Class: <code>Main</code> <a class="header-anchor" href="#class-main" aria-label="Permalink to “Class: Main”">​</a></h2><p><code>Main</code> 类处理项目的核心逻辑，包括初始化 OCR 模块、读取静态配置、管理线程等。</p><hr><h3 id="init" tabindex="-1"><code>__init__</code> <a class="header-anchor" href="#init" aria-label="Permalink to “__init__”">​</a></h3><p>初始化 <code>Main</code> 类。</p><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to “参数”">​</a></h4><ul><li><code>logger_signal</code> (<em>optional</em>): 用于日志记录的信号。</li><li><code>ocr_needed</code> (<em>list</em>, <em>optional</em>): 指定需要的 OCR 模块。</li></ul><h4 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to “返回值”">​</a></h4><p>无。</p><hr><h3 id="init-all-data" tabindex="-1"><code>init_all_data</code> <a class="header-anchor" href="#init-all-data" aria-label="Permalink to “init_all_data”">​</a></h3><p>初始化所有数据，包括 OCR 模块和静态配置。</p><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to “参数”">​</a></h4><p>无。</p><h4 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-label="Permalink to “返回值”">​</a></h4><p>无。</p><hr><h3 id="init-ocr" tabindex="-1"><code>init_ocr</code> <a class="header-anchor" href="#init-ocr" aria-label="Permalink to “init_ocr”">​</a></h3><p>初始化 OCR 模块。</p><h4 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to “参数”">​</a></h4><p>无。</p><h4 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-label="Permalink to “返回值”">​</a></h4><ul><li>(<em>bool</em>): 初始化成功返回 <code>True</code>，否则返回 <code>False</code>。</li></ul><hr><h3 id="get-thread" tabindex="-1"><code>get_thread</code> <a class="header-anchor" href="#get-thread" aria-label="Permalink to “get_thread”">​</a></h3><p>创建并返回一个新的线程对象。</p><h4 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to “参数”">​</a></h4><ul><li><code>config</code>: 配置对象。</li><li><code>name</code> (<em>str</em>, <em>optional</em>): 线程名称，默认值为 <code>&#39;1&#39;</code>。</li><li><code>logger_signal</code> (<em>optional</em>): 日志信号。</li><li><code>button_signal</code> (<em>optional</em>): 按钮信号。</li><li><code>update_signal</code> (<em>optional</em>): 更新信号。</li><li><code>exit_signal</code> (<em>optional</em>): 退出信号。</li></ul><h4 id="返回值-3" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-3" aria-label="Permalink to “返回值”">​</a></h4><ul><li>(<em>Baas_thread</em>): 创建的线程对象。</li></ul><hr><h3 id="stop-script" tabindex="-1"><code>stop_script</code> <a class="header-anchor" href="#stop-script" aria-label="Permalink to “stop_script”">​</a></h3><p>停止指定名称的脚本线程。</p><h4 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-label="Permalink to “参数”">​</a></h4><ul><li><code>name</code> (<em>str</em>): 要停止的线程名称。</li></ul><h4 id="返回值-4" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-4" aria-label="Permalink to “返回值”">​</a></h4><ul><li>(<em>bool</em>): 成功停止返回 <code>True</code>，否则返回 <code>False</code>。</li></ul><hr><h3 id="init-static-config" tabindex="-1"><code>init_static_config</code> <a class="header-anchor" href="#init-static-config" aria-label="Permalink to “init_static_config”">​</a></h3><p>加载静态配置文件 <code>static.json</code>。</p><h4 id="参数-5" tabindex="-1">参数 <a class="header-anchor" href="#参数-5" aria-label="Permalink to “参数”">​</a></h4><p>无。</p><h4 id="返回值-5" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-5" aria-label="Permalink to “返回值”">​</a></h4><ul><li>(<em>bool</em>): 成功加载返回 <code>True</code>，否则返回 <code>False</code>。</li></ul><hr><h3 id="operate-dict" tabindex="-1"><code>operate_dict</code> <a class="header-anchor" href="#operate-dict" aria-label="Permalink to “operate_dict”">​</a></h3><p>递归处理字典中的数据类型，确保所有值的类型为 Python 内置类型。</p><h4 id="参数-6" tabindex="-1">参数 <a class="header-anchor" href="#参数-6" aria-label="Permalink to “参数”">​</a></h4><ul><li><code>dic</code> (<em>dict</em>): 输入的字典。</li></ul><h4 id="返回值-6" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-6" aria-label="Permalink to “返回值”">​</a></h4><ul><li>(<em>dict</em>): 处理后的字典。</li></ul><hr><h3 id="is-float" tabindex="-1"><code>is_float</code> <a class="header-anchor" href="#is-float" aria-label="Permalink to “is_float”">​</a></h3><p>检查输入字符串是否为浮点数。</p><h4 id="参数-7" tabindex="-1">参数 <a class="header-anchor" href="#参数-7" aria-label="Permalink to “参数”">​</a></h4><ul><li><code>s</code> (<em>str</em>): 要检查的字符串。</li></ul><h4 id="返回值-7" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-7" aria-label="Permalink to “返回值”">​</a></h4><ul><li>(<em>bool</em>): 如果是浮点数返回 <code>True</code>，否则返回 <code>False</code>。</li></ul><hr><h3 id="operate-item" tabindex="-1"><code>operate_item</code> <a class="header-anchor" href="#operate-item" aria-label="Permalink to “operate_item”">​</a></h3><p>对字典或列表中的元素进行类型处理。</p><h4 id="参数-8" tabindex="-1">参数 <a class="header-anchor" href="#参数-8" aria-label="Permalink to “参数”">​</a></h4><ul><li><code>item</code> (<em>any</em>): 输入元素，可以是任意类型。</li></ul><h4 id="返回值-8" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-8" aria-label="Permalink to “返回值”">​</a></h4><ul><li>(<em>any</em>): 处理后的元素，类型根据输入自动调整。</li></ul><hr><h2 id="模块使用示例" tabindex="-1">模块使用示例 <a class="header-anchor" href="#模块使用示例" aria-label="Permalink to “模块使用示例”">​</a></h2><p>以下是主函数的执行逻辑：</p><ol><li>初始化 <code>Main</code> 对象，并加载 OCR 模块及静态配置。</li><li>通过 <code>Baas_thread</code> 对象运行多种任务，如： <ul><li><code>explore_normal_task</code></li><li><code>main_story</code></li><li>更多任务（已注释）。</li></ul></li></ol><hr><h2 id="外部依赖" tabindex="-1">外部依赖 <a class="header-anchor" href="#外部依赖" aria-label="Permalink to “外部依赖”">​</a></h2><h3 id="引用的模块" tabindex="-1">引用的模块 <a class="header-anchor" href="#引用的模块" aria-label="Permalink to “引用的模块”">​</a></h3><ul><li><code>json</code></li><li><code>os</code></li><li><code>core.utils</code>（定义了 <code>Logger</code> 类）</li><li><code>core.ocr</code>（定义了 <code>ocr</code> 模块）</li><li><code>gui.util.config_set</code>（定义了 <code>ConfigSet</code> 类）</li><li><code>core.Baas_thread</code>（定义了 <code>Baas_thread</code> 类）</li><li><code>module.create</code>（定义了多个任务处理方法）</li></ul><hr><p>此文档格式化为 Markdown，可直接用于 <strong>VitePress</strong> 或 <strong>MkDocs</strong> 等静态站点生成工具。</p>',78)]))}const b=e(r,[["render",d]]);export{p as __pageData,b as default};
