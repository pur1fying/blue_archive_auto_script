import{_ as e,c as r,o as i,ah as l}from"./chunks/framework.DaDXF32t.js";const o="/assets/static_feature_example.CAcTrlyW.png",t="/assets/static_feature_example2.Cn0l3y-m.png",g=JSON.parse('{"title":"图像识别","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/game_feature.md","filePath":"develop_doc/script/game_feature.md","lastUpdated":1756465088000}'),c={name:"develop_doc/script/game_feature.md"};function s(n,a,_,h,p,d){return i(),r("div",null,a[0]||(a[0]=[l('<h1 id="图像识别" tabindex="-1">图像识别 <a class="header-anchor" href="#图像识别" aria-label="Permalink to “图像识别”">​</a></h1><p>主要方法:</p><ol><li><a href="#模板匹配">模板匹配</a><ul><li>对应文件路径 : <code>&quot;core/image.py&quot;</code></li></ul></li><li><a href="#比较像素值">比较像素值</a><ul><li>对应文件路径 : <code>&quot;core/color.py&quot;</code></li></ul></li><li><a href="/develop_doc/script/ocr.html">OCR</a></li><li>TODO:: yolo目标检测</li></ol><h2 id="模板匹配" tabindex="-1">模板匹配 <a class="header-anchor" href="#模板匹配" aria-label="Permalink to “模板匹配”">​</a></h2><ul><li><strong>description</strong>: 通常用于识别游戏中静态的图像, 例如一些<strong>按钮</strong>, <strong>图标</strong> 例:</li></ul><ol><li>下图为游戏商店截图, 红色方框内的元素都是这个页面不变的元素, 当模板匹配函数认定这些元素存在时, 我们认为我们在商店界面 <ul><li><img src="'+o+'" alt="img"></li></ul></li><li>如图绿框中的元素, 会随着用户滑动屏幕而上下平移, 但是本体不会发生变化, 可以使用模板匹配判断是否出现, 出现坐标在哪</li></ol><ul><li><img src="'+t+'" alt="img"></li></ul><p><strong>note</strong>:</p><ul><li>对于1. 模板图像的位置固定, 我们只需要根据模板图像采集区域, 截取截图中的对应区域, 然后进行匹配 (两张长宽相同的图像作比较) <ul><li><strong>related functions</strong>: <ol><li><a href="#compare-image"><code>compare_image</code></a></li></ol></li></ul></li><li>对于2. 由于模板图像在截图中的位置不固定, 我们需要在它可出现区域内进行模板匹配, 获取最高的匹配度, 从而判断是否出现 <ul><li><strong>related functions</strong>: <ol><li><a href="#search-in-area"><code>search_in_area</code></a></li><li><a href="#search-image-in-area"><code>search_image_in_area</code></a></li><li><a href="#get-image-all-appear-position"><code>get_image_all_appear_position</code></a></li></ol></li></ul></li></ul><p>有关滑动（swipe）</p><ol><li>BAAS 大部分滑动都是默认会滑动到理想的位置，即没有做检测的，由于不同电脑性能不同，这会导致类似这种问题 #98</li><li>滑动时我们希望: <ul><li>检测本次滑动导致 y 平移多少像素 （1. <a href="https://github.com/pur1fying/blue_archive_auto_script/blob/master/module/common_shop.py#L93" target="_blank" rel="noreferrer">普通商店</a> 2. <a href="https://github.com/pur1fying/blue_archive_auto_script/blob/master/module/common_shop.py#L93" target="_blank" rel="noreferrer">制造</a></li><li>滑动直至某一个图像特征出现，在这里 我们希望得知滑动后需要选择的预设队伍编号是否出现</li></ul></li><li>所以我在考虑能否归纳一个函数能满足这类需求，帮助BAAS避免不稳定的滑动</li></ol><h2 id="比较像素值" tabindex="-1">比较像素值 <a class="header-anchor" href="#比较像素值" aria-label="Permalink to “比较像素值”">​</a></h2><h2 id="函数列表" tabindex="-1">函数列表 <a class="header-anchor" href="#函数列表" aria-label="Permalink to “函数列表”">​</a></h2><p><strong>note</strong>: 请阅读源码</p><h3 id="compare-image" tabindex="-1"><code>compare_image</code> <a class="header-anchor" href="#compare-image" aria-label="Permalink to “compare_image”">​</a></h3><h3 id="search-in-area" tabindex="-1"><code>search_in_area</code> <a class="header-anchor" href="#search-in-area" aria-label="Permalink to “search_in_area”">​</a></h3><h3 id="search-image-in-area" tabindex="-1"><code>search_image_in_area</code> <a class="header-anchor" href="#search-image-in-area" aria-label="Permalink to “search_image_in_area”">​</a></h3><h3 id="get-image-all-appear-position" tabindex="-1"><code>get_image_all_appear_position</code> <a class="header-anchor" href="#get-image-all-appear-position" aria-label="Permalink to “get_image_all_appear_position”">​</a></h3>',18)]))}const u=e(c,[["render",s]]);export{g as __pageData,u as default};
