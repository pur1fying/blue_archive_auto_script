import{_ as a,c as i,o as s,ah as t}from"./chunks/framework.DaDXF32t.js";const k=JSON.parse('{"title":"模拟器连接class Connection","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/Connection.md","filePath":"develop_doc/script/Connection.md","lastUpdated":1759835208000}'),n={name:"develop_doc/script/Connection.md"};function l(c,e,r,o,d,h){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="模拟器连接class-connection" tabindex="-1">模拟器连接<code>class Connection</code> <a class="header-anchor" href="#模拟器连接class-connection" aria-label="Permalink to “模拟器连接class Connection”">​</a></h1><p>对应文件路径 : <code>&quot;core/device/connection.py&quot;</code></p><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>阅读这部分内容前你可能需要了解</p><ol><li>如何用<a href="https://developer.android.com/tools/adb?hl=zh-cn" target="_blank" rel="noreferrer">ADB</a>管理安卓设备的连接</li><li>一些有关计算机网络的知识, 比如socket通信, 很多模拟器的截图/控制方法的底层都基于它实现</li></ol></div><h2 id="总览" tabindex="-1">总览 <a class="header-anchor" href="#总览" aria-label="Permalink to “总览”">​</a></h2><ol><li><p><strong>检查设备连接</strong></p><ul><li><strong>related configs</strong> : <a href="/develop_doc/script/config.html#adbip">adbIP</a> <strong>|</strong> <a href="/develop_doc/script/config.html#adbiport">adbPort</a></li><li><strong>related functions</strong> : <a href="#check-serial">check_serial</a> <strong>|</strong> <a href="#detect-device">detect_device</a> <strong>|</strong> <a href="#adb-connect">adb_connect</a></li></ul></li><li><p><strong>检查游戏包</strong></p><ul><li><strong>related configs</strong> : <a href="/develop_doc/script/config.html#server">server</a></li><li>Supports multiple servers (<code>CN</code>, <code>Global</code>, <code>JP</code>) for package configuration.</li><li>Handles package-related exceptions gracefully.</li></ul></li><li><p><strong>检查模拟器设置</strong></p><ul><li>Executes shell commands on connected devices.</li><li>Retrieves device properties using ADB.</li></ul></li></ol><hr><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to “Constructor”">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, Baas_instance)</span></span></code></pre></div><ul><li><strong>Args</strong>: <ol><li><code>Baas_instance</code>: <a href="/develop_doc/script/Baas_thread.html"><strong>Baas_thread</strong></a> 的实例</li></ol></li></ul><h2 id="members" tabindex="-1">Members <a class="header-anchor" href="#members" aria-label="Permalink to “Members”">​</a></h2><h3 id="baas-thread" tabindex="-1"><code>Baas_thread</code> <a class="header-anchor" href="#baas-thread" aria-label="Permalink to “Baas_thread”">​</a></h3><p><strong>type</strong> : <code>Baas_thread</code> Object</p><h3 id="logger" tabindex="-1"><code>logger</code> <a class="header-anchor" href="#logger" aria-label="Permalink to “logger”">​</a></h3><p><strong>type</strong> : <code>Logger</code> Object</p><h3 id="package" tabindex="-1"><code>package</code> <a class="header-anchor" href="#package" aria-label="Permalink to “package”">​</a></h3><p><strong>type</strong> : str</p><h3 id="activity" tabindex="-1"><code>activity</code> <a class="header-anchor" href="#activity" aria-label="Permalink to “activity”">​</a></h3><p><strong>type</strong> : str <strong>description</strong> : 当前package的activity名称</p><h3 id="server" tabindex="-1"><code>server</code> <a class="header-anchor" href="#server" aria-label="Permalink to “server”">​</a></h3><p><strong>type</strong> : str</p><h3 id="config-set" tabindex="-1"><code>config_set</code> <a class="header-anchor" href="#config-set" aria-label="Permalink to “config_set”">​</a></h3><h3 id="config" tabindex="-1"><code>config</code> <a class="header-anchor" href="#config" aria-label="Permalink to “config”">​</a></h3><h3 id="static-config" tabindex="-1"><code>static_config</code> <a class="header-anchor" href="#static-config" aria-label="Permalink to “static_config”">​</a></h3><h3 id="adbip" tabindex="-1"><code>adbIP</code> <a class="header-anchor" href="#adbip" aria-label="Permalink to “adbIP”">​</a></h3><h3 id="adbport" tabindex="-1"><code>adbPort</code> <a class="header-anchor" href="#adbport" aria-label="Permalink to “adbPort”">​</a></h3><hr><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to “Methods”">​</a></h2><h3 id="detect-device" tabindex="-1"><code>detect_device()</code> <a class="header-anchor" href="#detect-device" aria-label="Permalink to “detect_device()”">​</a></h3><p>Identifies available devices and sets the active serial.</p><h3 id="adb-connect" tabindex="-1"><code>adb_connect()</code> <a class="header-anchor" href="#adb-connect" aria-label="Permalink to “adb_connect()”">​</a></h3><p>Attempts to connect to the specified device serial.</p><h3 id="check-serial" tabindex="-1"><code>check_serial()</code> <a class="header-anchor" href="#check-serial" aria-label="Permalink to “check_serial()”">​</a></h3><p>Validates and revises the device serial if needed.</p><h3 id="detect-package" tabindex="-1"><code>detect_package()</code> <a class="header-anchor" href="#detect-package" aria-label="Permalink to “detect_package()”">​</a></h3><p>Detects the appropriate package based on the server configuration.</p><h3 id="check-package-exist-server" tabindex="-1"><code>check_package_exist(server)</code> <a class="header-anchor" href="#check-package-exist-server" aria-label="Permalink to “check_package_exist(server)”">​</a></h3><p>Verifies if a package exists for the specified server.</p><h3 id="auto-detect-package" tabindex="-1"><code>auto_detect_package()</code> <a class="header-anchor" href="#auto-detect-package" aria-label="Permalink to “auto_detect_package()”">​</a></h3><p>Automatically selects an available package if multiple are found.</p><h3 id="list-devices" tabindex="-1"><code>list_devices()</code> <a class="header-anchor" href="#list-devices" aria-label="Permalink to “list_devices()”">​</a></h3><p>Returns a list of connected devices.</p><h3 id="adb-shell-bytes-command-stream-false" tabindex="-1"><code>adb_shell_bytes(command, stream=False)</code> <a class="header-anchor" href="#adb-shell-bytes-command-stream-false" aria-label="Permalink to “adb_shell_bytes(command, stream=False)”">​</a></h3><p>Executes shell commands on the connected device.</p><h3 id="adb-getprop-name" tabindex="-1"><code>adb_getprop(name)</code> <a class="header-anchor" href="#adb-getprop-name" aria-label="Permalink to “adb_getprop(name)”">​</a></h3><p>Retrieves a property value from the device.</p><h3 id="set-serial-serial" tabindex="-1"><code>set_serial(serial)</code> <a class="header-anchor" href="#set-serial-serial" aria-label="Permalink to “set_serial(serial)”">​</a></h3><p>Updates the active device serial in the configuration.</p><h3 id="get-serial" tabindex="-1"><code>get_serial()</code> <a class="header-anchor" href="#get-serial" aria-label="Permalink to “get_serial()”">​</a></h3><p>Retrieves the active device serial.</p><h3 id="get-package-name" tabindex="-1"><code>get_package_name()</code> <a class="header-anchor" href="#get-package-name" aria-label="Permalink to “get_package_name()”">​</a></h3><p>Returns the currently detected package name.</p><h3 id="get-server" tabindex="-1"><code>get_server()</code> <a class="header-anchor" href="#get-server" aria-label="Permalink to “get_server()”">​</a></h3><p>Returns the server type (<code>CN</code>, <code>Global</code>, <code>JP</code>).</p><h3 id="get-activity-name" tabindex="-1"><code>get_activity_name()</code> <a class="header-anchor" href="#get-activity-name" aria-label="Permalink to “get_activity_name()”">​</a></h3><p>Returns the current activity name.</p><h3 id="is-mumu-family" tabindex="-1"><code>is_mumu_family()</code> <a class="header-anchor" href="#is-mumu-family" aria-label="Permalink to “is_mumu_family()”">​</a></h3><p>Checks if the device belongs to the MuMu family.</p><h3 id="is-mumu12-family" tabindex="-1"><code>is_mumu12_family()</code> <a class="header-anchor" href="#is-mumu12-family" aria-label="Permalink to “is_mumu12_family()”">​</a></h3><p>Specifically checks for MuMu12 devices.</p><h3 id="check-mumu-keep-alive" tabindex="-1"><code>check_mumu_keep_alive()</code> <a class="header-anchor" href="#check-mumu-keep-alive" aria-label="Permalink to “check_mumu_keep_alive()”">​</a></h3><p>Ensures the MuMu app keep-alive feature is properly configured.</p><hr><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to “Notes”">​</a></h2><ul><li>Ensure the <code>adb</code> command-line tool is installed and accessible in your environment.</li><li>Use the provided logger for debugging and monitoring operations.</li><li>Update the static configuration (<code>static_config</code>) as needed for new servers or packages.</li></ul><hr><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to “Example Usage”">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> core.exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RequestHumanTakeOver</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module.device.connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Connection</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initialize BAAS instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baas_instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Baas()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a Connection object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Connection(baas_instance)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Detect and connect to a device</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connection.detect_device()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check for available packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connection.detect_package()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Execute ADB commands</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">device_serial </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection.get_serial()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connected to device: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">device_serial</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,67)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
